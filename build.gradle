// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = "1.3.72"

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:4.0.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'project-report'
    id 'org.openapi.generator' version '4.3.1'
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

htmlDependencyReport {
    projects = project.allprojects
}

ext {
    packageName = "au.com.woolworths.village"
    spec = "$projectDir/village.json".toString()

    minSdkVersion = 21
    targetSdkVersion = 28
    buildToolsVersion = "29.0.3"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

openApiValidate {
    inputSpec = project.ext.spec
}

def pascalCase = {
    return it
        .split("-")
        .collect({ s -> "${Character.toUpperCase(s.charAt(0))}${s.substring(1).toLowerCase()}" })
        .join("")
}

def apis = [
        "okhttp-gson": [
            language: "java",
            library: "okhttp-gson"
        ],
        "objc": [
            language: "objc",
            library: null
        ]
]

apis.each { name, api ->
    def outputLoc = "${projectDir}/${name}".toString()

    task("generate${pascalCase(name)}SdkApi", type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        group = "SDK API Generators"
        description = "Generates a Village SDK API client using the ${name} framework"
        generatorName = api.language
        validateSpec = true
        library = api.library

        inputSpec = project.ext.spec
        outputDir = outputLoc

        groupId = project.ext.packageName
        id = "sdk-api-${name}"
        packageName = "${project.ext.packageName}.sdk.openapi"
        apiPackage = "${packageName.get()}.api"
        invokerPackage = "${packageName.get()}.client"
        modelPackage = "${packageName.get()}.dto"

        generateModelTests = false
        generateModelDocumentation = false
        generateApiTests = false

        configOptions = [
            hideGenerationTimestamp: "true",
            "serializableModel": "true"
        ]
    }
}
