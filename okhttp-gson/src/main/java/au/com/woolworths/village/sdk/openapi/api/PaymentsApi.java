/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.api;

import au.com.woolworths.village.sdk.openapi.client.ApiCallback;
import au.com.woolworths.village.sdk.openapi.client.ApiClient;
import au.com.woolworths.village.sdk.openapi.client.ApiException;
import au.com.woolworths.village.sdk.openapi.client.ApiResponse;
import au.com.woolworths.village.sdk.openapi.client.Configuration;
import au.com.woolworths.village.sdk.openapi.client.Pair;
import au.com.woolworths.village.sdk.openapi.client.ProgressRequestBody;
import au.com.woolworths.village.sdk.openapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import au.com.woolworths.village.sdk.openapi.dto.BaseErrorResponse;
import au.com.woolworths.village.sdk.openapi.dto.CompletionsErrorResponse;
import au.com.woolworths.village.sdk.openapi.dto.CompletionsRequest;
import au.com.woolworths.village.sdk.openapi.dto.CompletionsSuccessResponse;
import au.com.woolworths.village.sdk.openapi.dto.PaymentsErrorResponse;
import au.com.woolworths.village.sdk.openapi.dto.PaymentsRequest;
import au.com.woolworths.village.sdk.openapi.dto.PaymentsSuccessResponse;
import au.com.woolworths.village.sdk.openapi.dto.RefundsErrorResponse;
import au.com.woolworths.village.sdk.openapi.dto.RefundsRequest;
import au.com.woolworths.village.sdk.openapi.dto.RefundsSuccessResponse;
import au.com.woolworths.village.sdk.openapi.dto.VoidsErrorResponse;
import au.com.woolworths.village.sdk.openapi.dto.VoidsRequest;
import au.com.woolworths.village.sdk.openapi.dto.VoidsSuccessResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient localVarApiClient;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for completionsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completionsPostCall(String xApiKey, String xJWSSignature, CompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/completions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completionsPostValidateBeforeCall(String xApiKey, String xJWSSignature, CompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling completionsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling completionsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling completionsPost(Async)");
        }
        

        okhttp3.Call localVarCall = completionsPostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Completions
     * Complete pre-authed payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return CompletionsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public CompletionsSuccessResponse completionsPost(String xApiKey, String xJWSSignature, CompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<CompletionsSuccessResponse> localVarResp = completionsPostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Completions
     * Complete pre-authed payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;CompletionsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompletionsSuccessResponse> completionsPostWithHttpInfo(String xApiKey, String xJWSSignature, CompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = completionsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<CompletionsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Completions (asynchronously)
     * Complete pre-authed payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completionsPostAsync(String xApiKey, String xJWSSignature, CompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<CompletionsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completionsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<CompletionsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guestPaymentsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestPaymentsPostCall(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/guest/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestPaymentsPostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling guestPaymentsPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling guestPaymentsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling guestPaymentsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling guestPaymentsPost(Async)");
        }
        

        okhttp3.Call localVarCall = guestPaymentsPostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Guest Payments
     * Make guest payments to a merchant using guest payment intruments.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return PaymentsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentsSuccessResponse guestPaymentsPost(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<PaymentsSuccessResponse> localVarResp = guestPaymentsPostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Guest Payments
     * Make guest payments to a merchant using guest payment intruments.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;PaymentsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentsSuccessResponse> guestPaymentsPostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = guestPaymentsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<PaymentsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Guest Payments (asynchronously)
     * Make guest payments to a merchant using guest payment intruments.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestPaymentsPostAsync(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<PaymentsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestPaymentsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<PaymentsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsPostCall(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsPostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling paymentsPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling paymentsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling paymentsPost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentsPostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * Payments
     * Make payments to a merchant using payment intruments.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return PaymentsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentsSuccessResponse paymentsPost(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        ApiResponse<PaymentsSuccessResponse> localVarResp = paymentsPostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * Payments
     * Make payments to a merchant using payment intruments.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ApiResponse&lt;PaymentsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentsSuccessResponse> paymentsPostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = paymentsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<PaymentsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Payments (asynchronously)
     * Make payments to a merchant using payment intruments.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsPostAsync(String xApiKey, String authorization, String xJWSSignature, PaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback<PaymentsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<PaymentsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refundsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundsPostCall(String xApiKey, String xJWSSignature, RefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refundsPostValidateBeforeCall(String xApiKey, String xJWSSignature, RefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling refundsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling refundsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling refundsPost(Async)");
        }
        

        okhttp3.Call localVarCall = refundsPostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Refunds
     * Refund payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return RefundsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public RefundsSuccessResponse refundsPost(String xApiKey, String xJWSSignature, RefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<RefundsSuccessResponse> localVarResp = refundsPostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Refunds
     * Refund payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;RefundsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundsSuccessResponse> refundsPostWithHttpInfo(String xApiKey, String xJWSSignature, RefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = refundsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<RefundsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refunds (asynchronously)
     * Refund payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundsPostAsync(String xApiKey, String xJWSSignature, RefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<RefundsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refundsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<RefundsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for voidsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voidsPostCall(String xApiKey, String xJWSSignature, VoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/voids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call voidsPostValidateBeforeCall(String xApiKey, String xJWSSignature, VoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling voidsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling voidsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling voidsPost(Async)");
        }
        

        okhttp3.Call localVarCall = voidsPostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Voids
     * Void (cancel) pre-authed payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return VoidsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public VoidsSuccessResponse voidsPost(String xApiKey, String xJWSSignature, VoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<VoidsSuccessResponse> localVarResp = voidsPostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Voids
     * Void (cancel) pre-authed payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;VoidsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoidsSuccessResponse> voidsPostWithHttpInfo(String xApiKey, String xJWSSignature, VoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = voidsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<VoidsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Voids (asynchronously)
     * Void (cancel) pre-authed payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voidsPostAsync(String xApiKey, String xJWSSignature, VoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<VoidsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = voidsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<VoidsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
