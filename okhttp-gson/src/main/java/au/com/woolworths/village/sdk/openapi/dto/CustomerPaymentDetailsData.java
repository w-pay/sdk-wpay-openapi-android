/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPaymentDetailsDataSecondaryInstruments;
import au.com.woolworths.village.sdk.openapi.dto.PreferencePayments;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * Mandatory data object containing response
 */
@ApiModel(description = "Mandatory data object containing response")

public class CustomerPaymentDetailsData implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRIMARY_INSTRUMENT_ID = "primaryInstrumentId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_INSTRUMENT_ID)
  private String primaryInstrumentId;

  public static final String SERIALIZED_NAME_SECONDARY_INSTRUMENTS = "secondaryInstruments";
  @SerializedName(SERIALIZED_NAME_SECONDARY_INSTRUMENTS)
  private List<CustomerPaymentDetailsDataSecondaryInstruments> secondaryInstruments = null;

  public static final String SERIALIZED_NAME_SKIP_ROLLBACK = "skipRollback";
  @SerializedName(SERIALIZED_NAME_SKIP_ROLLBACK)
  private Boolean skipRollback;

  public static final String SERIALIZED_NAME_CLIENT_REFERENCE = "clientReference";
  @SerializedName(SERIALIZED_NAME_CLIENT_REFERENCE)
  private String clientReference;

  public static final String SERIALIZED_NAME_PREFERENCES = "preferences";
  @SerializedName(SERIALIZED_NAME_PREFERENCES)
  private PreferencePayments preferences;


  public CustomerPaymentDetailsData primaryInstrumentId(String primaryInstrumentId) {
    
    this.primaryInstrumentId = primaryInstrumentId;
    return this;
  }

   /**
   * The Id of the primary instrument.  Will be used as the balance of the transaction.  If not present then the primary instrument from the customer preferences will be used.
   * @return primaryInstrumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Id of the primary instrument.  Will be used as the balance of the transaction.  If not present then the primary instrument from the customer preferences will be used.")

  public String getPrimaryInstrumentId() {
    return primaryInstrumentId;
  }


  public void setPrimaryInstrumentId(String primaryInstrumentId) {
    this.primaryInstrumentId = primaryInstrumentId;
  }


  public CustomerPaymentDetailsData secondaryInstruments(List<CustomerPaymentDetailsDataSecondaryInstruments> secondaryInstruments) {
    
    this.secondaryInstruments = secondaryInstruments;
    return this;
  }

  public CustomerPaymentDetailsData addSecondaryInstrumentsItem(CustomerPaymentDetailsDataSecondaryInstruments secondaryInstrumentsItem) {
    if (this.secondaryInstruments == null) {
      this.secondaryInstruments = new ArrayList<CustomerPaymentDetailsDataSecondaryInstruments>();
    }
    this.secondaryInstruments.add(secondaryInstrumentsItem);
    return this;
  }

   /**
   * The secondary instruments (if any) used to partially make the payment.  If not present then the primary instrument from the customer preferences will be used.  To specify that no secondary instruments should be used an empty array should be provided.
   * @return secondaryInstruments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The secondary instruments (if any) used to partially make the payment.  If not present then the primary instrument from the customer preferences will be used.  To specify that no secondary instruments should be used an empty array should be provided.")

  public List<CustomerPaymentDetailsDataSecondaryInstruments> getSecondaryInstruments() {
    return secondaryInstruments;
  }


  public void setSecondaryInstruments(List<CustomerPaymentDetailsDataSecondaryInstruments> secondaryInstruments) {
    this.secondaryInstruments = secondaryInstruments;
  }


  public CustomerPaymentDetailsData skipRollback(Boolean skipRollback) {
    
    this.skipRollback = skipRollback;
    return this;
  }

   /**
   * An optional flag allowing the consumer to indicate that automatic rollback step should be skipped in the case of failure
   * @return skipRollback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional flag allowing the consumer to indicate that automatic rollback step should be skipped in the case of failure")

  public Boolean getSkipRollback() {
    return skipRollback;
  }


  public void setSkipRollback(Boolean skipRollback) {
    this.skipRollback = skipRollback;
  }


  public CustomerPaymentDetailsData clientReference(String clientReference) {
    
    this.clientReference = clientReference;
    return this;
  }

   /**
   * An optional client reference to be associated with the transaction.  If not suplied the transactionId will be used.
   * @return clientReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional client reference to be associated with the transaction.  If not suplied the transactionId will be used.")

  public String getClientReference() {
    return clientReference;
  }


  public void setClientReference(String clientReference) {
    this.clientReference = clientReference;
  }


  public CustomerPaymentDetailsData preferences(PreferencePayments preferences) {
    
    this.preferences = preferences;
    return this;
  }

   /**
   * Get preferences
   * @return preferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PreferencePayments getPreferences() {
    return preferences;
  }


  public void setPreferences(PreferencePayments preferences) {
    this.preferences = preferences;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerPaymentDetailsData customerPaymentDetailsData = (CustomerPaymentDetailsData) o;
    return Objects.equals(this.primaryInstrumentId, customerPaymentDetailsData.primaryInstrumentId) &&
        Objects.equals(this.secondaryInstruments, customerPaymentDetailsData.secondaryInstruments) &&
        Objects.equals(this.skipRollback, customerPaymentDetailsData.skipRollback) &&
        Objects.equals(this.clientReference, customerPaymentDetailsData.clientReference) &&
        Objects.equals(this.preferences, customerPaymentDetailsData.preferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryInstrumentId, secondaryInstruments, skipRollback, clientReference, preferences);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerPaymentDetailsData {\n");
    sb.append("    primaryInstrumentId: ").append(toIndentedString(primaryInstrumentId)).append("\n");
    sb.append("    secondaryInstruments: ").append(toIndentedString(secondaryInstruments)).append("\n");
    sb.append("    skipRollback: ").append(toIndentedString(skipRollback)).append("\n");
    sb.append("    clientReference: ").append(toIndentedString(clientReference)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

