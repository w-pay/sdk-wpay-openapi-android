/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.dto;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.io.Serializable;
import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * The response to a step up challenge (e.g. credit card step up or gift card passcode)
 */
@ApiModel(description = "The response to a step up challenge (e.g. credit card step up or gift card passcode)")

public class MetaChallengeChallengeResponses implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_INSTRUMENT_ID = "instrumentId";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_ID)
  private String instrumentId;

  /**
   * The type of token that has been provided
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    STEP_UP("STEP_UP"),
    
    PASSCODE("PASSCODE"),

    THREEDS("3DS"),

    THREEDS_FRICTIONLESS("3DS-frictionless");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;


  public MetaChallengeChallengeResponses instrumentId(String instrumentId) {
    
    this.instrumentId = instrumentId;
    return this;
  }

   /**
   * The instrument id related to the step up challenge
   * @return instrumentId
  **/
  @ApiModelProperty(required = true, value = "The instrument id related to the step up challenge")

  public String getInstrumentId() {
    return instrumentId;
  }


  public void setInstrumentId(String instrumentId) {
    this.instrumentId = instrumentId;
  }


  public MetaChallengeChallengeResponses type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of token that has been provided
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of token that has been provided")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MetaChallengeChallengeResponses token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * The value requested by the challenge
   * @return token
  **/
  @ApiModelProperty(required = true, value = "The value requested by the challenge")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public MetaChallengeChallengeResponses reference(String reference) {
    
    this.reference = reference;
    return this;
  }

   /**
   * An optional reference that could be used for audit tracing
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional reference that could be used for audit tracing")

  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    this.reference = reference;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetaChallengeChallengeResponses metaChallengeChallengeResponses = (MetaChallengeChallengeResponses) o;
    return Objects.equals(this.instrumentId, metaChallengeChallengeResponses.instrumentId) &&
        Objects.equals(this.type, metaChallengeChallengeResponses.type) &&
        Objects.equals(this.token, metaChallengeChallengeResponses.token) &&
        Objects.equals(this.reference, metaChallengeChallengeResponses.reference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instrumentId, type, token, reference);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetaChallengeChallengeResponses {\n");
    sb.append("    instrumentId: ").append(toIndentedString(instrumentId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

