/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.dto;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Gift card product detailed data
 */
@ApiModel(description = "Gift card product detailed data")

public class GiftingProductDetail implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The manner in which the barcode is displayed for optical recognition (can be used to drive CX experience flows)
   */
  @JsonAdapter(BarCodeTypeEnum.Adapter.class)
  public enum BarCodeTypeEnum {
    PAN("PAN"),
    
    GTIN("GTIN");

    private String value;

    BarCodeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BarCodeTypeEnum fromValue(String value) {
      for (BarCodeTypeEnum b : BarCodeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BarCodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BarCodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BarCodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BarCodeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BAR_CODE_TYPE = "barCodeType";
  @SerializedName(SERIALIZED_NAME_BAR_CODE_TYPE)
  private BarCodeTypeEnum barCodeType;

  public static final String SERIALIZED_NAME_LAST_UPDATE_DATE_TIME = "lastUpdateDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_DATE_TIME)
  private String lastUpdateDateTime;

  public static final String SERIALIZED_NAME_DEFAULT_DESIGN = "defaultDesign";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DESIGN)
  private GiftingProductDesign defaultDesign;

  public static final String SERIALIZED_NAME_DISCOUNT_OFFERED = "discountOffered";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_OFFERED)
  private GiftingProductDiscount discountOffered;

  public static final String SERIALIZED_NAME_REDEMPTION_INSTRUCTIONS = "redemptionInstructions";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_INSTRUCTIONS)
  private String redemptionInstructions;

  /**
   * The enabled redemption channels
   */
  @JsonAdapter(RedemptionTypeEnum.Adapter.class)
  public enum RedemptionTypeEnum {
    INSTORE("INSTORE"),
    
    ONLINE("ONLINE"),
    
    BOTH("BOTH");

    private String value;

    RedemptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedemptionTypeEnum fromValue(String value) {
      for (RedemptionTypeEnum b : RedemptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedemptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedemptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedemptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedemptionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REDEMPTION_TYPE = "redemptionType";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_TYPE)
  private RedemptionTypeEnum redemptionType;

  public static final String SERIALIZED_NAME_TERMS_AND_CONDITIONS = "termsAndConditions";
  @SerializedName(SERIALIZED_NAME_TERMS_AND_CONDITIONS)
  private String termsAndConditions;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Integer minValue;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Integer maxValue;

  public static final String SERIALIZED_NAME_EXPIRY_PERIOD_IN_DAYS = "expiryPeriodInDays";
  @SerializedName(SERIALIZED_NAME_EXPIRY_PERIOD_IN_DAYS)
  private Integer expiryPeriodInDays;

  public static final String SERIALIZED_NAME_EXPIRY_PERIOD_TEXT = "expiryPeriodText";
  @SerializedName(SERIALIZED_NAME_EXPIRY_PERIOD_TEXT)
  private String expiryPeriodText;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_REDEMPTION_STORES = "redemptionStores";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_STORES)
  private List<String> redemptionStores = null;

  /**
   * Digital or phyiscal availability of the gift card
   */
  @JsonAdapter(AvailabilityEnum.Adapter.class)
  public enum AvailabilityEnum {
    DIGITAL("DIGITAL"),
    
    PHYSICAL("PHYSICAL"),
    
    BOTH("BOTH");

    private String value;

    AvailabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityEnum fromValue(String value) {
      for (AvailabilityEnum b : AvailabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private AvailabilityEnum availability;

  public static final String SERIALIZED_NAME_DESIGNS = "designs";
  @SerializedName(SERIALIZED_NAME_DESIGNS)
  private List<GiftingProductDesign> designs = new ArrayList<GiftingProductDesign>();


  public GiftingProductDetail productId(String productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * Unique identifier assigned to gift card program
   * @return productId
  **/
  @ApiModelProperty(required = true, value = "Unique identifier assigned to gift card program")

  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    this.productId = productId;
  }


  public GiftingProductDetail name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Display name of the gift card program
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Display name of the gift card program")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GiftingProductDetail barCodeType(BarCodeTypeEnum barCodeType) {
    
    this.barCodeType = barCodeType;
    return this;
  }

   /**
   * The manner in which the barcode is displayed for optical recognition (can be used to drive CX experience flows)
   * @return barCodeType
  **/
  @ApiModelProperty(required = true, value = "The manner in which the barcode is displayed for optical recognition (can be used to drive CX experience flows)")

  public BarCodeTypeEnum getBarCodeType() {
    return barCodeType;
  }


  public void setBarCodeType(BarCodeTypeEnum barCodeType) {
    this.barCodeType = barCodeType;
  }


  public GiftingProductDetail lastUpdateDateTime(String lastUpdateDateTime) {
    
    this.lastUpdateDateTime = lastUpdateDateTime;
    return this;
  }

   /**
   * The timestamp the gift card program was last updated. The timestamp format is ISO8601.
   * @return lastUpdateDateTime
  **/
  @ApiModelProperty(example = "2017-10-26T04:56:25.046Z", required = true, value = "The timestamp the gift card program was last updated. The timestamp format is ISO8601.")

  public String getLastUpdateDateTime() {
    return lastUpdateDateTime;
  }


  public void setLastUpdateDateTime(String lastUpdateDateTime) {
    this.lastUpdateDateTime = lastUpdateDateTime;
  }


  public GiftingProductDetail defaultDesign(GiftingProductDesign defaultDesign) {
    
    this.defaultDesign = defaultDesign;
    return this;
  }

   /**
   * Get defaultDesign
   * @return defaultDesign
  **/
  @ApiModelProperty(required = true, value = "")

  public GiftingProductDesign getDefaultDesign() {
    return defaultDesign;
  }


  public void setDefaultDesign(GiftingProductDesign defaultDesign) {
    this.defaultDesign = defaultDesign;
  }


  public GiftingProductDetail discountOffered(GiftingProductDiscount discountOffered) {
    
    this.discountOffered = discountOffered;
    return this;
  }

   /**
   * Get discountOffered
   * @return discountOffered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GiftingProductDiscount getDiscountOffered() {
    return discountOffered;
  }


  public void setDiscountOffered(GiftingProductDiscount discountOffered) {
    this.discountOffered = discountOffered;
  }


  public GiftingProductDetail redemptionInstructions(String redemptionInstructions) {
    
    this.redemptionInstructions = redemptionInstructions;
    return this;
  }

   /**
   * Display instruction on where and how to redeem the product
   * @return redemptionInstructions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Display instruction on where and how to redeem the product")

  public String getRedemptionInstructions() {
    return redemptionInstructions;
  }


  public void setRedemptionInstructions(String redemptionInstructions) {
    this.redemptionInstructions = redemptionInstructions;
  }


  public GiftingProductDetail redemptionType(RedemptionTypeEnum redemptionType) {
    
    this.redemptionType = redemptionType;
    return this;
  }

   /**
   * The enabled redemption channels
   * @return redemptionType
  **/
  @ApiModelProperty(required = true, value = "The enabled redemption channels")

  public RedemptionTypeEnum getRedemptionType() {
    return redemptionType;
  }


  public void setRedemptionType(RedemptionTypeEnum redemptionType) {
    this.redemptionType = redemptionType;
  }


  public GiftingProductDetail termsAndConditions(String termsAndConditions) {
    
    this.termsAndConditions = termsAndConditions;
    return this;
  }

   /**
   * Terms and conditions text for the gift card product
   * @return termsAndConditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Terms and conditions text for the gift card product")

  public String getTermsAndConditions() {
    return termsAndConditions;
  }


  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }


  public GiftingProductDetail minValue(Integer minValue) {
    
    this.minValue = minValue;
    return this;
  }

   /**
   * Minimum AUD value gift card able to be purchased for this product
   * @return minValue
  **/
  @ApiModelProperty(required = true, value = "Minimum AUD value gift card able to be purchased for this product")

  public Integer getMinValue() {
    return minValue;
  }


  public void setMinValue(Integer minValue) {
    this.minValue = minValue;
  }


  public GiftingProductDetail maxValue(Integer maxValue) {
    
    this.maxValue = maxValue;
    return this;
  }

   /**
   * Maximum AUD value gift card able to be purchased for this product
   * @return maxValue
  **/
  @ApiModelProperty(required = true, value = "Maximum AUD value gift card able to be purchased for this product")

  public Integer getMaxValue() {
    return maxValue;
  }


  public void setMaxValue(Integer maxValue) {
    this.maxValue = maxValue;
  }


  public GiftingProductDetail expiryPeriodInDays(Integer expiryPeriodInDays) {
    
    this.expiryPeriodInDays = expiryPeriodInDays;
    return this;
  }

   /**
   * Expiry period for the gift card product once purchased
   * @return expiryPeriodInDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiry period for the gift card product once purchased")

  public Integer getExpiryPeriodInDays() {
    return expiryPeriodInDays;
  }


  public void setExpiryPeriodInDays(Integer expiryPeriodInDays) {
    this.expiryPeriodInDays = expiryPeriodInDays;
  }


  public GiftingProductDetail expiryPeriodText(String expiryPeriodText) {
    
    this.expiryPeriodText = expiryPeriodText;
    return this;
  }

   /**
   * Display text for the expiry period
   * @return expiryPeriodText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Display text for the expiry period")

  public String getExpiryPeriodText() {
    return expiryPeriodText;
  }


  public void setExpiryPeriodText(String expiryPeriodText) {
    this.expiryPeriodText = expiryPeriodText;
  }


  public GiftingProductDetail isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Returns true if the gift card product is active, else false. Only active programs are orderable
   * @return isActive
  **/
  @ApiModelProperty(required = true, value = "Returns true if the gift card product is active, else false. Only active programs are orderable")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public GiftingProductDetail redemptionStores(List<String> redemptionStores) {
    
    this.redemptionStores = redemptionStores;
    return this;
  }

  public GiftingProductDetail addRedemptionStoresItem(String redemptionStoresItem) {
    if (this.redemptionStores == null) {
      this.redemptionStores = new ArrayList<String>();
    }
    this.redemptionStores.add(redemptionStoresItem);
    return this;
  }

   /**
   * The stores in which the gift card product is able to be redeemed
   * @return redemptionStores
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The stores in which the gift card product is able to be redeemed")

  public List<String> getRedemptionStores() {
    return redemptionStores;
  }


  public void setRedemptionStores(List<String> redemptionStores) {
    this.redemptionStores = redemptionStores;
  }


  public GiftingProductDetail availability(AvailabilityEnum availability) {
    
    this.availability = availability;
    return this;
  }

   /**
   * Digital or phyiscal availability of the gift card
   * @return availability
  **/
  @ApiModelProperty(required = true, value = "Digital or phyiscal availability of the gift card")

  public AvailabilityEnum getAvailability() {
    return availability;
  }


  public void setAvailability(AvailabilityEnum availability) {
    this.availability = availability;
  }


  public GiftingProductDetail designs(List<GiftingProductDesign> designs) {
    
    this.designs = designs;
    return this;
  }

  public GiftingProductDetail addDesignsItem(GiftingProductDesign designsItem) {
    this.designs.add(designsItem);
    return this;
  }

   /**
   * Array of all alternative designs for the gift card product
   * @return designs
  **/
  @ApiModelProperty(required = true, value = "Array of all alternative designs for the gift card product")

  public List<GiftingProductDesign> getDesigns() {
    return designs;
  }


  public void setDesigns(List<GiftingProductDesign> designs) {
    this.designs = designs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftingProductDetail giftingProductDetail = (GiftingProductDetail) o;
    return Objects.equals(this.productId, giftingProductDetail.productId) &&
        Objects.equals(this.name, giftingProductDetail.name) &&
        Objects.equals(this.barCodeType, giftingProductDetail.barCodeType) &&
        Objects.equals(this.lastUpdateDateTime, giftingProductDetail.lastUpdateDateTime) &&
        Objects.equals(this.defaultDesign, giftingProductDetail.defaultDesign) &&
        Objects.equals(this.discountOffered, giftingProductDetail.discountOffered) &&
        Objects.equals(this.redemptionInstructions, giftingProductDetail.redemptionInstructions) &&
        Objects.equals(this.redemptionType, giftingProductDetail.redemptionType) &&
        Objects.equals(this.termsAndConditions, giftingProductDetail.termsAndConditions) &&
        Objects.equals(this.minValue, giftingProductDetail.minValue) &&
        Objects.equals(this.maxValue, giftingProductDetail.maxValue) &&
        Objects.equals(this.expiryPeriodInDays, giftingProductDetail.expiryPeriodInDays) &&
        Objects.equals(this.expiryPeriodText, giftingProductDetail.expiryPeriodText) &&
        Objects.equals(this.isActive, giftingProductDetail.isActive) &&
        Objects.equals(this.redemptionStores, giftingProductDetail.redemptionStores) &&
        Objects.equals(this.availability, giftingProductDetail.availability) &&
        Objects.equals(this.designs, giftingProductDetail.designs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productId, name, barCodeType, lastUpdateDateTime, defaultDesign, discountOffered, redemptionInstructions, redemptionType, termsAndConditions, minValue, maxValue, expiryPeriodInDays, expiryPeriodText, isActive, redemptionStores, availability, designs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftingProductDetail {\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    barCodeType: ").append(toIndentedString(barCodeType)).append("\n");
    sb.append("    lastUpdateDateTime: ").append(toIndentedString(lastUpdateDateTime)).append("\n");
    sb.append("    defaultDesign: ").append(toIndentedString(defaultDesign)).append("\n");
    sb.append("    discountOffered: ").append(toIndentedString(discountOffered)).append("\n");
    sb.append("    redemptionInstructions: ").append(toIndentedString(redemptionInstructions)).append("\n");
    sb.append("    redemptionType: ").append(toIndentedString(redemptionType)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    expiryPeriodInDays: ").append(toIndentedString(expiryPeriodInDays)).append("\n");
    sb.append("    expiryPeriodText: ").append(toIndentedString(expiryPeriodText)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    redemptionStores: ").append(toIndentedString(redemptionStores)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    designs: ").append(toIndentedString(designs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

