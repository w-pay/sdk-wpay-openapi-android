/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.api;

import au.com.woolworths.village.sdk.openapi.client.ApiCallback;
import au.com.woolworths.village.sdk.openapi.client.ApiClient;
import au.com.woolworths.village.sdk.openapi.client.ApiException;
import au.com.woolworths.village.sdk.openapi.client.ApiResponse;
import au.com.woolworths.village.sdk.openapi.client.Configuration;
import au.com.woolworths.village.sdk.openapi.client.Pair;
import au.com.woolworths.village.sdk.openapi.client.ProgressRequestBody;
import au.com.woolworths.village.sdk.openapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import au.com.woolworths.village.sdk.openapi.dto.CustomerCreatePaymentAgreementRequest;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPaymentAgreementResponse;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPaymentDetails;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPaymentDetails1;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPaymentSessionResult;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPreferences;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPreferencesResult;
import au.com.woolworths.village.sdk.openapi.dto.CustomerTermsAndConditions;
import au.com.woolworths.village.sdk.openapi.dto.CustomerTermsAndConditionsResult;
import au.com.woolworths.village.sdk.openapi.dto.CustomerUpdatePaymentAgreementRequest;
import au.com.woolworths.village.sdk.openapi.dto.Error;
import au.com.woolworths.village.sdk.openapi.dto.GetCustomerPaymentInstrumentResult;
import au.com.woolworths.village.sdk.openapi.dto.GetCustomerPaymentInstrumentsResults;
import au.com.woolworths.village.sdk.openapi.dto.GetCustomerPaymentRequestResult;
import au.com.woolworths.village.sdk.openapi.dto.GetCustomerTransactionDetailsResults;
import au.com.woolworths.village.sdk.openapi.dto.GetCustomerTransactionsResult;
import au.com.woolworths.village.sdk.openapi.dto.InitiatePaymentInstrumentAdditionResults;
import au.com.woolworths.village.sdk.openapi.dto.InstrumentAdditionDetails;
import au.com.woolworths.village.sdk.openapi.dto.MakeCustomerPaymentResults;
import org.threeten.bp.OffsetDateTime;
import au.com.woolworths.village.sdk.openapi.dto.PaymentAgreementListResponse;
import au.com.woolworths.village.sdk.openapi.dto.UpdatePaymentSessionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerApi {
    private ApiClient localVarApiClient;

    public CustomerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for acceptCustomerTermsAndConditions
     * @param xWalletID  (required)
     * @param customerTermsAndConditions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ts and Cs successfully accepted.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptCustomerTermsAndConditionsCall(String xWalletID, CustomerTermsAndConditions customerTermsAndConditions, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customerTermsAndConditions;

        // create path and map variables
        String localVarPath = "/instore/customer/termsandconditions/acceptance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xWalletID != null) {
            localVarHeaderParams.put("X-Wallet-ID", localVarApiClient.parameterToString(xWalletID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptCustomerTermsAndConditionsValidateBeforeCall(String xWalletID, CustomerTermsAndConditions customerTermsAndConditions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xWalletID' is set
        if (xWalletID == null) {
            throw new ApiException("Missing the required parameter 'xWalletID' when calling acceptCustomerTermsAndConditions(Async)");
        }
        
        // verify the required parameter 'customerTermsAndConditions' is set
        if (customerTermsAndConditions == null) {
            throw new ApiException("Missing the required parameter 'customerTermsAndConditions' when calling acceptCustomerTermsAndConditions(Async)");
        }
        

        okhttp3.Call localVarCall = acceptCustomerTermsAndConditionsCall(xWalletID, customerTermsAndConditions, _callback);
        return localVarCall;

    }

    /**
     * Agree to T&amp;Cs
     * Customer accepts terms and conditions
     * @param xWalletID  (required)
     * @param customerTermsAndConditions  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ts and Cs successfully accepted.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public void acceptCustomerTermsAndConditions(String xWalletID, CustomerTermsAndConditions customerTermsAndConditions) throws ApiException {
        acceptCustomerTermsAndConditionsWithHttpInfo(xWalletID, customerTermsAndConditions);
    }

    /**
     * Agree to T&amp;Cs
     * Customer accepts terms and conditions
     * @param xWalletID  (required)
     * @param customerTermsAndConditions  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ts and Cs successfully accepted.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> acceptCustomerTermsAndConditionsWithHttpInfo(String xWalletID, CustomerTermsAndConditions customerTermsAndConditions) throws ApiException {
        okhttp3.Call localVarCall = acceptCustomerTermsAndConditionsValidateBeforeCall(xWalletID, customerTermsAndConditions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Agree to T&amp;Cs (asynchronously)
     * Customer accepts terms and conditions
     * @param xWalletID  (required)
     * @param customerTermsAndConditions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ts and Cs successfully accepted.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptCustomerTermsAndConditionsAsync(String xWalletID, CustomerTermsAndConditions customerTermsAndConditions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptCustomerTermsAndConditionsValidateBeforeCall(xWalletID, customerTermsAndConditions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomerPaymentAgreement
     * @param xWalletID  (required)
     * @param customerCreatePaymentAgreementRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerPaymentAgreementCall(String xWalletID, CustomerCreatePaymentAgreementRequest customerCreatePaymentAgreementRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customerCreatePaymentAgreementRequest;

        // create path and map variables
        String localVarPath = "/instore/customer/payments/agreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xWalletID != null) {
            localVarHeaderParams.put("X-Wallet-ID", localVarApiClient.parameterToString(xWalletID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerPaymentAgreementValidateBeforeCall(String xWalletID, CustomerCreatePaymentAgreementRequest customerCreatePaymentAgreementRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xWalletID' is set
        if (xWalletID == null) {
            throw new ApiException("Missing the required parameter 'xWalletID' when calling createCustomerPaymentAgreement(Async)");
        }
        
        // verify the required parameter 'customerCreatePaymentAgreementRequest' is set
        if (customerCreatePaymentAgreementRequest == null) {
            throw new ApiException("Missing the required parameter 'customerCreatePaymentAgreementRequest' when calling createCustomerPaymentAgreement(Async)");
        }
        

        okhttp3.Call localVarCall = createCustomerPaymentAgreementCall(xWalletID, customerCreatePaymentAgreementRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Payment Agreement
     * Create an new payment agreement
     * @param xWalletID  (required)
     * @param customerCreatePaymentAgreementRequest  (required)
     * @return CustomerPaymentAgreementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPaymentAgreementResponse createCustomerPaymentAgreement(String xWalletID, CustomerCreatePaymentAgreementRequest customerCreatePaymentAgreementRequest) throws ApiException {
        ApiResponse<CustomerPaymentAgreementResponse> localVarResp = createCustomerPaymentAgreementWithHttpInfo(xWalletID, customerCreatePaymentAgreementRequest);
        return localVarResp.getData();
    }

    /**
     * Create Payment Agreement
     * Create an new payment agreement
     * @param xWalletID  (required)
     * @param customerCreatePaymentAgreementRequest  (required)
     * @return ApiResponse&lt;CustomerPaymentAgreementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPaymentAgreementResponse> createCustomerPaymentAgreementWithHttpInfo(String xWalletID, CustomerCreatePaymentAgreementRequest customerCreatePaymentAgreementRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomerPaymentAgreementValidateBeforeCall(xWalletID, customerCreatePaymentAgreementRequest, null);
        Type localVarReturnType = new TypeToken<CustomerPaymentAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment Agreement (asynchronously)
     * Create an new payment agreement
     * @param xWalletID  (required)
     * @param customerCreatePaymentAgreementRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerPaymentAgreementAsync(String xWalletID, CustomerCreatePaymentAgreementRequest customerCreatePaymentAgreementRequest, final ApiCallback<CustomerPaymentAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerPaymentAgreementValidateBeforeCall(xWalletID, customerCreatePaymentAgreementRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerPaymentAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerUpdatePaymentSession
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param updatePaymentSessionRequest  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully updated. No content returned. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist, has already been associated with a wallet or has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerUpdatePaymentSessionCall(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, UpdatePaymentSessionRequest updatePaymentSessionRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updatePaymentSessionRequest;

        // create path and map variables
        String localVarPath = "/instore/customer/payment/session/{paymentSessionId}"
            .replaceAll("\\{" + "paymentSessionId" + "\\}", localVarApiClient.escapeString(paymentSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerUpdatePaymentSessionValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, UpdatePaymentSessionRequest updatePaymentSessionRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling customerUpdatePaymentSession(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling customerUpdatePaymentSession(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling customerUpdatePaymentSession(Async)");
        }
        
        // verify the required parameter 'paymentSessionId' is set
        if (paymentSessionId == null) {
            throw new ApiException("Missing the required parameter 'paymentSessionId' when calling customerUpdatePaymentSession(Async)");
        }
        
        // verify the required parameter 'updatePaymentSessionRequest' is set
        if (updatePaymentSessionRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePaymentSessionRequest' when calling customerUpdatePaymentSession(Async)");
        }
        

        okhttp3.Call localVarCall = customerUpdatePaymentSessionCall(xApiKey, authorization, xJWSSignature, paymentSessionId, updatePaymentSessionRequest, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Update Payment Session
     * Update the payment session details
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param updatePaymentSessionRequest  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully updated. No content returned. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist, has already been associated with a wallet or has expired </td><td>  -  </td></tr>
     </table>
     */
    public void customerUpdatePaymentSession(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, UpdatePaymentSessionRequest updatePaymentSessionRequest, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        customerUpdatePaymentSessionWithHttpInfo(xApiKey, authorization, xJWSSignature, paymentSessionId, updatePaymentSessionRequest, xAuthKey, xAuthDigest, xMessageId);
    }

    /**
     * Update Payment Session
     * Update the payment session details
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param updatePaymentSessionRequest  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully updated. No content returned. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist, has already been associated with a wallet or has expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> customerUpdatePaymentSessionWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, UpdatePaymentSessionRequest updatePaymentSessionRequest, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = customerUpdatePaymentSessionValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentSessionId, updatePaymentSessionRequest, xAuthKey, xAuthDigest, xMessageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Payment Session (asynchronously)
     * Update the payment session details
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param updatePaymentSessionRequest  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully updated. No content returned. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist, has already been associated with a wallet or has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerUpdatePaymentSessionAsync(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, UpdatePaymentSessionRequest updatePaymentSessionRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerUpdatePaymentSessionValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentSessionId, updatePaymentSessionRequest, xAuthKey, xAuthDigest, xMessageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomerPaymentSession
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to delete (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully deleted. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerPaymentSessionCall(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/payment/session/{paymentSessionId}"
            .replaceAll("\\{" + "paymentSessionId" + "\\}", localVarApiClient.escapeString(paymentSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerPaymentSessionValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling deleteCustomerPaymentSession(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteCustomerPaymentSession(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling deleteCustomerPaymentSession(Async)");
        }
        
        // verify the required parameter 'paymentSessionId' is set
        if (paymentSessionId == null) {
            throw new ApiException("Missing the required parameter 'paymentSessionId' when calling deleteCustomerPaymentSession(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCustomerPaymentSessionCall(xApiKey, authorization, xJWSSignature, paymentSessionId, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Delete Payment Session
     * Deletes a payment session by setting its expiration date/time to now
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to delete (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully deleted. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomerPaymentSession(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        deleteCustomerPaymentSessionWithHttpInfo(xApiKey, authorization, xJWSSignature, paymentSessionId, xAuthKey, xAuthDigest, xMessageId);
    }

    /**
     * Delete Payment Session
     * Deletes a payment session by setting its expiration date/time to now
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to delete (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully deleted. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomerPaymentSessionWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerPaymentSessionValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentSessionId, xAuthKey, xAuthDigest, xMessageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Payment Session (asynchronously)
     * Deletes a payment session by setting its expiration date/time to now
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to delete (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully deleted. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerPaymentSessionAsync(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerPaymentSessionValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentSessionId, xAuthKey, xAuthDigest, xMessageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePaymentInstrument
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentInstrumentId The ID of the specific instrument (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment Instrument successfully deleted.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentInstrumentCall(String xApiKey, String authorization, String xJWSSignature, String paymentInstrumentId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/instruments/{paymentInstrumentId}"
            .replaceAll("\\{" + "paymentInstrumentId" + "\\}", localVarApiClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePaymentInstrumentValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String paymentInstrumentId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling deletePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling deletePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'paymentInstrumentId' is set
        if (paymentInstrumentId == null) {
            throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling deletePaymentInstrument(Async)");
        }
        

        okhttp3.Call localVarCall = deletePaymentInstrumentCall(xApiKey, authorization, xJWSSignature, paymentInstrumentId, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Delete a payment instrument
     * Delete an existing payment instrument
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentInstrumentId The ID of the specific instrument (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment Instrument successfully deleted.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public void deletePaymentInstrument(String xApiKey, String authorization, String xJWSSignature, String paymentInstrumentId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        deletePaymentInstrumentWithHttpInfo(xApiKey, authorization, xJWSSignature, paymentInstrumentId, xAuthKey, xAuthDigest, xMessageId);
    }

    /**
     * Delete a payment instrument
     * Delete an existing payment instrument
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentInstrumentId The ID of the specific instrument (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment Instrument successfully deleted.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePaymentInstrumentWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String paymentInstrumentId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = deletePaymentInstrumentValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentInstrumentId, xAuthKey, xAuthDigest, xMessageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a payment instrument (asynchronously)
     * Delete an existing payment instrument
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentInstrumentId The ID of the specific instrument (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment Instrument successfully deleted.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentInstrumentAsync(String xApiKey, String authorization, String xJWSSignature, String paymentInstrumentId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePaymentInstrumentValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentInstrumentId, xAuthKey, xAuthDigest, xMessageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPaymentInstrument
     * @param paymentInstrumentId The ID of the specific instrument (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param publicKey The optional ephemeral public key used to encrypt sensitive instrument data and include (&#39;cipherText&#39; in the &#39;meta&#39; object) that encrypted data in the response sent back to the consumer. If this parameter is omitted the sensitive data is NOT returned in the response to the consumer. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentInstrumentCall(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, String publicKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/instruments/{paymentInstrumentId}"
            .replaceAll("\\{" + "paymentInstrumentId" + "\\}", localVarApiClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (publicKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicKey", publicKey));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentInstrumentValidateBeforeCall(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, String publicKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInstrumentId' is set
        if (paymentInstrumentId == null) {
            throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling getCustomerPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerPaymentInstrument(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPaymentInstrumentCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, publicKey, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Instrument
     * Get the specified payment instrument of the customer. Returns the payment instrument data and optionally the sensitive data (encrypted in the response) of an instrument record
     * @param paymentInstrumentId The ID of the specific instrument (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param publicKey The optional ephemeral public key used to encrypt sensitive instrument data and include (&#39;cipherText&#39; in the &#39;meta&#39; object) that encrypted data in the response sent back to the consumer. If this parameter is omitted the sensitive data is NOT returned in the response to the consumer. (optional)
     * @return GetCustomerPaymentInstrumentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerPaymentInstrumentResult getCustomerPaymentInstrument(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, String publicKey) throws ApiException {
        ApiResponse<GetCustomerPaymentInstrumentResult> localVarResp = getCustomerPaymentInstrumentWithHttpInfo(paymentInstrumentId, xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, publicKey);
        return localVarResp.getData();
    }

    /**
     * Get Payment Instrument
     * Get the specified payment instrument of the customer. Returns the payment instrument data and optionally the sensitive data (encrypted in the response) of an instrument record
     * @param paymentInstrumentId The ID of the specific instrument (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param publicKey The optional ephemeral public key used to encrypt sensitive instrument data and include (&#39;cipherText&#39; in the &#39;meta&#39; object) that encrypted data in the response sent back to the consumer. If this parameter is omitted the sensitive data is NOT returned in the response to the consumer. (optional)
     * @return ApiResponse&lt;GetCustomerPaymentInstrumentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerPaymentInstrumentResult> getCustomerPaymentInstrumentWithHttpInfo(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, String publicKey) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentInstrumentValidateBeforeCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, publicKey, null);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentInstrumentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Instrument (asynchronously)
     * Get the specified payment instrument of the customer. Returns the payment instrument data and optionally the sensitive data (encrypted in the response) of an instrument record
     * @param paymentInstrumentId The ID of the specific instrument (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param publicKey The optional ephemeral public key used to encrypt sensitive instrument data and include (&#39;cipherText&#39; in the &#39;meta&#39; object) that encrypted data in the response sent back to the consumer. If this parameter is omitted the sensitive data is NOT returned in the response to the consumer. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentInstrumentAsync(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, String publicKey, final ApiCallback<GetCustomerPaymentInstrumentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentInstrumentValidateBeforeCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, publicKey, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentInstrumentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPaymentInstruments
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentInstrumentsCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentInstrumentsValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerPaymentInstruments(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerPaymentInstruments(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerPaymentInstruments(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPaymentInstrumentsCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Instruments
     * Get the list of payment instruments currently configured for the customer.  Returns an array of instrument records that can be used to execute payments
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return GetCustomerPaymentInstrumentsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerPaymentInstrumentsResults getCustomerPaymentInstruments(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<GetCustomerPaymentInstrumentsResults> localVarResp = getCustomerPaymentInstrumentsWithHttpInfo(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Instruments
     * Get the list of payment instruments currently configured for the customer.  Returns an array of instrument records that can be used to execute payments
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;GetCustomerPaymentInstrumentsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerPaymentInstrumentsResults> getCustomerPaymentInstrumentsWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentInstrumentsValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentInstrumentsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Instruments (asynchronously)
     * Get the list of payment instruments currently configured for the customer.  Returns an array of instrument records that can be used to execute payments
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentInstrumentsAsync(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<GetCustomerPaymentInstrumentsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentInstrumentsValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentInstrumentsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPaymentRequestDetailsByPaymentId
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentRequestDetailsByPaymentIdCall(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/payments/{paymentRequestId}"
            .replaceAll("\\{" + "paymentRequestId" + "\\}", localVarApiClient.escapeString(paymentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentRequestDetailsByPaymentIdValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerPaymentRequestDetailsByPaymentId(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerPaymentRequestDetailsByPaymentId(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerPaymentRequestDetailsByPaymentId(Async)");
        }
        
        // verify the required parameter 'paymentRequestId' is set
        if (paymentRequestId == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestId' when calling getCustomerPaymentRequestDetailsByPaymentId(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPaymentRequestDetailsByPaymentIdCall(xApiKey, authorization, xJWSSignature, paymentRequestId, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Request details
     * Get the details for a specific payment request so that the customer can pay using it
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return GetCustomerPaymentRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerPaymentRequestResult getCustomerPaymentRequestDetailsByPaymentId(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<GetCustomerPaymentRequestResult> localVarResp = getCustomerPaymentRequestDetailsByPaymentIdWithHttpInfo(xApiKey, authorization, xJWSSignature, paymentRequestId, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Request details
     * Get the details for a specific payment request so that the customer can pay using it
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;GetCustomerPaymentRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerPaymentRequestResult> getCustomerPaymentRequestDetailsByPaymentIdWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentRequestDetailsByPaymentIdValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentRequestId, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentRequestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Request details (asynchronously)
     * Get the details for a specific payment request so that the customer can pay using it
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentRequestDetailsByPaymentIdAsync(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<GetCustomerPaymentRequestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentRequestDetailsByPaymentIdValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentRequestId, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentRequestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPaymentRequestDetailsByQRCodeId
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param qrId The ID of the specific QR Code (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified QR Code ID doesn&#39;t exist or has been expired or the underlying payment request is no longer usable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentRequestDetailsByQRCodeIdCall(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/qr/{qrId}"
            .replaceAll("\\{" + "qrId" + "\\}", localVarApiClient.escapeString(qrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentRequestDetailsByQRCodeIdValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerPaymentRequestDetailsByQRCodeId(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerPaymentRequestDetailsByQRCodeId(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerPaymentRequestDetailsByQRCodeId(Async)");
        }
        
        // verify the required parameter 'qrId' is set
        if (qrId == null) {
            throw new ApiException("Missing the required parameter 'qrId' when calling getCustomerPaymentRequestDetailsByQRCodeId(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPaymentRequestDetailsByQRCodeIdCall(xApiKey, authorization, xJWSSignature, qrId, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Request details from a QR code
     * Get the details for a specific payment from a QR Code ID so that the customer can pay using it
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param qrId The ID of the specific QR Code (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return GetCustomerPaymentRequestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified QR Code ID doesn&#39;t exist or has been expired or the underlying payment request is no longer usable </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerPaymentRequestResult getCustomerPaymentRequestDetailsByQRCodeId(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<GetCustomerPaymentRequestResult> localVarResp = getCustomerPaymentRequestDetailsByQRCodeIdWithHttpInfo(xApiKey, authorization, xJWSSignature, qrId, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Request details from a QR code
     * Get the details for a specific payment from a QR Code ID so that the customer can pay using it
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param qrId The ID of the specific QR Code (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;GetCustomerPaymentRequestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified QR Code ID doesn&#39;t exist or has been expired or the underlying payment request is no longer usable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerPaymentRequestResult> getCustomerPaymentRequestDetailsByQRCodeIdWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentRequestDetailsByQRCodeIdValidateBeforeCall(xApiKey, authorization, xJWSSignature, qrId, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentRequestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Request details from a QR code (asynchronously)
     * Get the details for a specific payment from a QR Code ID so that the customer can pay using it
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param qrId The ID of the specific QR Code (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified QR Code ID doesn&#39;t exist or has been expired or the underlying payment request is no longer usable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentRequestDetailsByQRCodeIdAsync(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<GetCustomerPaymentRequestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentRequestDetailsByQRCodeIdValidateBeforeCall(xApiKey, authorization, xJWSSignature, qrId, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerPaymentRequestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPaymentSession
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentSessionCall(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/payment/session/{paymentSessionId}"
            .replaceAll("\\{" + "paymentSessionId" + "\\}", localVarApiClient.escapeString(paymentSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentSessionValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerPaymentSession(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerPaymentSession(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerPaymentSession(Async)");
        }
        
        // verify the required parameter 'paymentSessionId' is set
        if (paymentSessionId == null) {
            throw new ApiException("Missing the required parameter 'paymentSessionId' when calling getCustomerPaymentSession(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPaymentSessionCall(xApiKey, authorization, xJWSSignature, paymentSessionId, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Session
     * Get the details of a payment session
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return CustomerPaymentSessionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPaymentSessionResult getCustomerPaymentSession(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<CustomerPaymentSessionResult> localVarResp = getCustomerPaymentSessionWithHttpInfo(xApiKey, authorization, xJWSSignature, paymentSessionId, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Session
     * Get the details of a payment session
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;CustomerPaymentSessionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPaymentSessionResult> getCustomerPaymentSessionWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentSessionValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentSessionId, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<CustomerPaymentSessionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Session (asynchronously)
     * Get the details of a payment session
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentSessionAsync(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<CustomerPaymentSessionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentSessionValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentSessionId, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<CustomerPaymentSessionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPaymentSessionByQRCodeId
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param qrId The ID of the qr relating to the payment session (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentSessionByQRCodeIdCall(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/payment/session/qr/{qrId}"
            .replaceAll("\\{" + "qrId" + "\\}", localVarApiClient.escapeString(qrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPaymentSessionByQRCodeIdValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerPaymentSessionByQRCodeId(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerPaymentSessionByQRCodeId(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerPaymentSessionByQRCodeId(Async)");
        }
        
        // verify the required parameter 'qrId' is set
        if (qrId == null) {
            throw new ApiException("Missing the required parameter 'qrId' when calling getCustomerPaymentSessionByQRCodeId(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPaymentSessionByQRCodeIdCall(xApiKey, authorization, xJWSSignature, qrId, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Session
     * Get the payment session associated with the qrId
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param qrId The ID of the qr relating to the payment session (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return CustomerPaymentSessionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPaymentSessionResult getCustomerPaymentSessionByQRCodeId(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<CustomerPaymentSessionResult> localVarResp = getCustomerPaymentSessionByQRCodeIdWithHttpInfo(xApiKey, authorization, xJWSSignature, qrId, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Session
     * Get the payment session associated with the qrId
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param qrId The ID of the qr relating to the payment session (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;CustomerPaymentSessionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPaymentSessionResult> getCustomerPaymentSessionByQRCodeIdWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPaymentSessionByQRCodeIdValidateBeforeCall(xApiKey, authorization, xJWSSignature, qrId, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<CustomerPaymentSessionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Session (asynchronously)
     * Get the payment session associated with the qrId
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param qrId The ID of the qr relating to the payment session (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPaymentSessionByQRCodeIdAsync(String xApiKey, String authorization, String xJWSSignature, String qrId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<CustomerPaymentSessionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPaymentSessionByQRCodeIdValidateBeforeCall(xApiKey, authorization, xJWSSignature, qrId, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<CustomerPaymentSessionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerPreferences
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPreferencesCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerPreferencesValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerPreferences(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerPreferences(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerPreferences(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerPreferencesCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Get Preferences
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return CustomerPreferencesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPreferencesResult getCustomerPreferences(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<CustomerPreferencesResult> localVarResp = getCustomerPreferencesWithHttpInfo(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Get Preferences
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;CustomerPreferencesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPreferencesResult> getCustomerPreferencesWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerPreferencesValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<CustomerPreferencesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Preferences (asynchronously)
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerPreferencesAsync(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<CustomerPreferencesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerPreferencesValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<CustomerPreferencesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerTermsAndConditionsAcceptance
     * @param xWalletID  (required)
     * @param type The type of Ts and Cs that the shopper/customer has agreed to.  Defaults to all if absent (optional)
     * @param version The version of Ts and Cs that the shopper/customer has agreed to.  Defaults to all if absent (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Ts and Cs response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTermsAndConditionsAcceptanceCall(String xWalletID, String type, String version, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/termsandconditions/acceptance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xWalletID != null) {
            localVarHeaderParams.put("X-Wallet-ID", localVarApiClient.parameterToString(xWalletID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerTermsAndConditionsAcceptanceValidateBeforeCall(String xWalletID, String type, String version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xWalletID' is set
        if (xWalletID == null) {
            throw new ApiException("Missing the required parameter 'xWalletID' when calling getCustomerTermsAndConditionsAcceptance(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerTermsAndConditionsAcceptanceCall(xWalletID, type, version, _callback);
        return localVarCall;

    }

    /**
     * Get Customer Terms and Conditions acceptance
     * Get the terms and conditions agreed to by the customer
     * @param xWalletID  (required)
     * @param type The type of Ts and Cs that the shopper/customer has agreed to.  Defaults to all if absent (optional)
     * @param version The version of Ts and Cs that the shopper/customer has agreed to.  Defaults to all if absent (optional)
     * @return CustomerTermsAndConditionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Ts and Cs response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerTermsAndConditionsResult getCustomerTermsAndConditionsAcceptance(String xWalletID, String type, String version) throws ApiException {
        ApiResponse<CustomerTermsAndConditionsResult> localVarResp = getCustomerTermsAndConditionsAcceptanceWithHttpInfo(xWalletID, type, version);
        return localVarResp.getData();
    }

    /**
     * Get Customer Terms and Conditions acceptance
     * Get the terms and conditions agreed to by the customer
     * @param xWalletID  (required)
     * @param type The type of Ts and Cs that the shopper/customer has agreed to.  Defaults to all if absent (optional)
     * @param version The version of Ts and Cs that the shopper/customer has agreed to.  Defaults to all if absent (optional)
     * @return ApiResponse&lt;CustomerTermsAndConditionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Ts and Cs response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerTermsAndConditionsResult> getCustomerTermsAndConditionsAcceptanceWithHttpInfo(String xWalletID, String type, String version) throws ApiException {
        okhttp3.Call localVarCall = getCustomerTermsAndConditionsAcceptanceValidateBeforeCall(xWalletID, type, version, null);
        Type localVarReturnType = new TypeToken<CustomerTermsAndConditionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Customer Terms and Conditions acceptance (asynchronously)
     * Get the terms and conditions agreed to by the customer
     * @param xWalletID  (required)
     * @param type The type of Ts and Cs that the shopper/customer has agreed to.  Defaults to all if absent (optional)
     * @param version The version of Ts and Cs that the shopper/customer has agreed to.  Defaults to all if absent (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Ts and Cs response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTermsAndConditionsAcceptanceAsync(String xWalletID, String type, String version, final ApiCallback<CustomerTermsAndConditionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerTermsAndConditionsAcceptanceValidateBeforeCall(xWalletID, type, version, _callback);
        Type localVarReturnType = new TypeToken<CustomerTermsAndConditionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerTransactionDetails
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param transactionId The ID of the specific transaction (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTransactionDetailsCall(String xApiKey, String authorization, String xJWSSignature, String transactionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/transactions/{transactionId}"
            .replaceAll("\\{" + "transactionId" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerTransactionDetailsValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String transactionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerTransactionDetails(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerTransactionDetails(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerTransactionDetails(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getCustomerTransactionDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerTransactionDetailsCall(xApiKey, authorization, xJWSSignature, transactionId, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction Details
     * Get the details for a specific transaction previously executed by the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param transactionId The ID of the specific transaction (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return GetCustomerTransactionDetailsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerTransactionDetailsResults getCustomerTransactionDetails(String xApiKey, String authorization, String xJWSSignature, String transactionId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<GetCustomerTransactionDetailsResults> localVarResp = getCustomerTransactionDetailsWithHttpInfo(xApiKey, authorization, xJWSSignature, transactionId, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Details
     * Get the details for a specific transaction previously executed by the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param transactionId The ID of the specific transaction (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;GetCustomerTransactionDetailsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerTransactionDetailsResults> getCustomerTransactionDetailsWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String transactionId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerTransactionDetailsValidateBeforeCall(xApiKey, authorization, xJWSSignature, transactionId, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<GetCustomerTransactionDetailsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Details (asynchronously)
     * Get the details for a specific transaction previously executed by the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param transactionId The ID of the specific transaction (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTransactionDetailsAsync(String xApiKey, String authorization, String xJWSSignature, String transactionId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<GetCustomerTransactionDetailsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerTransactionDetailsValidateBeforeCall(xApiKey, authorization, xJWSSignature, transactionId, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerTransactionDetailsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerTransactions
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param paymentRequestId If present, limits the list of transactions to those that relate to the payment request (optional)
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTransactionsCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String paymentRequestId, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (paymentRequestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentRequestId", paymentRequestId));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-time", endTime));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerTransactionsValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String paymentRequestId, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getCustomerTransactions(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCustomerTransactions(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling getCustomerTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerTransactionsCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, paymentRequestId, startTime, endTime, pageSize, page, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction List
     * Get a list of the previously executed transactions for the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param paymentRequestId If present, limits the list of transactions to those that relate to the payment request (optional)
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return GetCustomerTransactionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomerTransactionsResult getCustomerTransactions(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String paymentRequestId, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page) throws ApiException {
        ApiResponse<GetCustomerTransactionsResult> localVarResp = getCustomerTransactionsWithHttpInfo(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, paymentRequestId, startTime, endTime, pageSize, page);
        return localVarResp.getData();
    }

    /**
     * Get Transaction List
     * Get a list of the previously executed transactions for the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param paymentRequestId If present, limits the list of transactions to those that relate to the payment request (optional)
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return ApiResponse&lt;GetCustomerTransactionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCustomerTransactionsResult> getCustomerTransactionsWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String paymentRequestId, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getCustomerTransactionsValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, paymentRequestId, startTime, endTime, pageSize, page, null);
        Type localVarReturnType = new TypeToken<GetCustomerTransactionsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction List (asynchronously)
     * Get a list of the previously executed transactions for the customer.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param paymentRequestId If present, limits the list of transactions to those that relate to the payment request (optional)
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerTransactionsAsync(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String paymentRequestId, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback<GetCustomerTransactionsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerTransactionsValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, paymentRequestId, startTime, endTime, pageSize, page, _callback);
        Type localVarReturnType = new TypeToken<GetCustomerTransactionsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentAgreement
     * @param xWalletID  (required)
     * @param paymentToken The ID of the specific payment agreement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAgreementCall(String xWalletID, String paymentToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/payments/agreements/{paymentToken}"
            .replaceAll("\\{" + "paymentToken" + "\\}", localVarApiClient.escapeString(paymentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xWalletID != null) {
            localVarHeaderParams.put("X-Wallet-ID", localVarApiClient.parameterToString(xWalletID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentAgreementValidateBeforeCall(String xWalletID, String paymentToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xWalletID' is set
        if (xWalletID == null) {
            throw new ApiException("Missing the required parameter 'xWalletID' when calling getPaymentAgreement(Async)");
        }
        
        // verify the required parameter 'paymentToken' is set
        if (paymentToken == null) {
            throw new ApiException("Missing the required parameter 'paymentToken' when calling getPaymentAgreement(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentAgreementCall(xWalletID, paymentToken, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Agreement
     * Get a specific payment agreements
     * @param xWalletID  (required)
     * @param paymentToken The ID of the specific payment agreement (required)
     * @return CustomerPaymentAgreementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPaymentAgreementResponse getPaymentAgreement(String xWalletID, String paymentToken) throws ApiException {
        ApiResponse<CustomerPaymentAgreementResponse> localVarResp = getPaymentAgreementWithHttpInfo(xWalletID, paymentToken);
        return localVarResp.getData();
    }

    /**
     * Get Payment Agreement
     * Get a specific payment agreements
     * @param xWalletID  (required)
     * @param paymentToken The ID of the specific payment agreement (required)
     * @return ApiResponse&lt;CustomerPaymentAgreementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPaymentAgreementResponse> getPaymentAgreementWithHttpInfo(String xWalletID, String paymentToken) throws ApiException {
        okhttp3.Call localVarCall = getPaymentAgreementValidateBeforeCall(xWalletID, paymentToken, null);
        Type localVarReturnType = new TypeToken<CustomerPaymentAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Agreement (asynchronously)
     * Get a specific payment agreements
     * @param xWalletID  (required)
     * @param paymentToken The ID of the specific payment agreement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAgreementAsync(String xWalletID, String paymentToken, final ApiCallback<CustomerPaymentAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentAgreementValidateBeforeCall(xWalletID, paymentToken, _callback);
        Type localVarReturnType = new TypeToken<CustomerPaymentAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentAgreementList
     * @param xWalletID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get Payment Agreements list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAgreementListCall(String xWalletID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instore/customer/payments/agreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xWalletID != null) {
            localVarHeaderParams.put("X-Wallet-ID", localVarApiClient.parameterToString(xWalletID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentAgreementListValidateBeforeCall(String xWalletID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xWalletID' is set
        if (xWalletID == null) {
            throw new ApiException("Missing the required parameter 'xWalletID' when calling getPaymentAgreementList(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentAgreementListCall(xWalletID, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Agreements
     * Get a list of payment agreements
     * @param xWalletID  (required)
     * @return PaymentAgreementListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get Payment Agreements list </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAgreementListResponse getPaymentAgreementList(String xWalletID) throws ApiException {
        ApiResponse<PaymentAgreementListResponse> localVarResp = getPaymentAgreementListWithHttpInfo(xWalletID);
        return localVarResp.getData();
    }

    /**
     * Get Payment Agreements
     * Get a list of payment agreements
     * @param xWalletID  (required)
     * @return ApiResponse&lt;PaymentAgreementListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get Payment Agreements list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAgreementListResponse> getPaymentAgreementListWithHttpInfo(String xWalletID) throws ApiException {
        okhttp3.Call localVarCall = getPaymentAgreementListValidateBeforeCall(xWalletID, null);
        Type localVarReturnType = new TypeToken<PaymentAgreementListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Agreements (asynchronously)
     * Get a list of payment agreements
     * @param xWalletID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get Payment Agreements list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentAgreementListAsync(String xWalletID, final ApiCallback<PaymentAgreementListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentAgreementListValidateBeforeCall(xWalletID, _callback);
        Type localVarReturnType = new TypeToken<PaymentAgreementListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiatePaymentInstrumentAddition
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param instrumentAdditionDetails  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiatePaymentInstrumentAdditionCall(String xApiKey, String authorization, String xJWSSignature, InstrumentAdditionDetails instrumentAdditionDetails, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = instrumentAdditionDetails;

        // create path and map variables
        String localVarPath = "/instore/customer/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiatePaymentInstrumentAdditionValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, InstrumentAdditionDetails instrumentAdditionDetails, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling initiatePaymentInstrumentAddition(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling initiatePaymentInstrumentAddition(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling initiatePaymentInstrumentAddition(Async)");
        }
        
        // verify the required parameter 'instrumentAdditionDetails' is set
        if (instrumentAdditionDetails == null) {
            throw new ApiException("Missing the required parameter 'instrumentAdditionDetails' when calling initiatePaymentInstrumentAddition(Async)");
        }
        

        okhttp3.Call localVarCall = initiatePaymentInstrumentAdditionCall(xApiKey, authorization, xJWSSignature, instrumentAdditionDetails, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Initiate Instrument Addition
     * Initiate the addition of a new payment instrument for this customer.  This API returns a URL to be used to access the DigiPay IFrame based interface to request the customer to enter a payment instrument details.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param instrumentAdditionDetails  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return InitiatePaymentInstrumentAdditionResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public InitiatePaymentInstrumentAdditionResults initiatePaymentInstrumentAddition(String xApiKey, String authorization, String xJWSSignature, InstrumentAdditionDetails instrumentAdditionDetails, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<InitiatePaymentInstrumentAdditionResults> localVarResp = initiatePaymentInstrumentAdditionWithHttpInfo(xApiKey, authorization, xJWSSignature, instrumentAdditionDetails, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Initiate Instrument Addition
     * Initiate the addition of a new payment instrument for this customer.  This API returns a URL to be used to access the DigiPay IFrame based interface to request the customer to enter a payment instrument details.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param instrumentAdditionDetails  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;InitiatePaymentInstrumentAdditionResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InitiatePaymentInstrumentAdditionResults> initiatePaymentInstrumentAdditionWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, InstrumentAdditionDetails instrumentAdditionDetails, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = initiatePaymentInstrumentAdditionValidateBeforeCall(xApiKey, authorization, xJWSSignature, instrumentAdditionDetails, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<InitiatePaymentInstrumentAdditionResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Instrument Addition (asynchronously)
     * Initiate the addition of a new payment instrument for this customer.  This API returns a URL to be used to access the DigiPay IFrame based interface to request the customer to enter a payment instrument details.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param instrumentAdditionDetails  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiatePaymentInstrumentAdditionAsync(String xApiKey, String authorization, String xJWSSignature, InstrumentAdditionDetails instrumentAdditionDetails, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<InitiatePaymentInstrumentAdditionResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiatePaymentInstrumentAdditionValidateBeforeCall(xApiKey, authorization, xJWSSignature, instrumentAdditionDetails, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<InitiatePaymentInstrumentAdditionResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for makeCustomerPayment
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param customerPaymentDetails  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet The makes instruments available in the everyday pay wallet available for payments (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeCustomerPaymentCall(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, CustomerPaymentDetails customerPaymentDetails, String xAuthKey, String xAuthDigest, String xMessageId, Boolean xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customerPaymentDetails;

        // create path and map variables
        String localVarPath = "/instore/customer/payments/{paymentRequestId}"
            .replaceAll("\\{" + "paymentRequestId" + "\\}", localVarApiClient.escapeString(paymentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeCustomerPaymentValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, CustomerPaymentDetails customerPaymentDetails, String xAuthKey, String xAuthDigest, String xMessageId, Boolean xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling makeCustomerPayment(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling makeCustomerPayment(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling makeCustomerPayment(Async)");
        }
        
        // verify the required parameter 'paymentRequestId' is set
        if (paymentRequestId == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestId' when calling makeCustomerPayment(Async)");
        }
        
        // verify the required parameter 'customerPaymentDetails' is set
        if (customerPaymentDetails == null) {
            throw new ApiException("Missing the required parameter 'customerPaymentDetails' when calling makeCustomerPayment(Async)");
        }
        

        okhttp3.Call localVarCall = makeCustomerPaymentCall(xApiKey, authorization, xJWSSignature, paymentRequestId, customerPaymentDetails, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * Pay Payment
     * Pay a specific payment using the instrument details provided
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param customerPaymentDetails  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet The makes instruments available in the everyday pay wallet available for payments (optional, default to false)
     * @return MakeCustomerPaymentResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public MakeCustomerPaymentResults makeCustomerPayment(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, CustomerPaymentDetails customerPaymentDetails, String xAuthKey, String xAuthDigest, String xMessageId, Boolean xEverydayPayWallet) throws ApiException {
        ApiResponse<MakeCustomerPaymentResults> localVarResp = makeCustomerPaymentWithHttpInfo(xApiKey, authorization, xJWSSignature, paymentRequestId, customerPaymentDetails, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * Pay Payment
     * Pay a specific payment using the instrument details provided
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param customerPaymentDetails  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet The makes instruments available in the everyday pay wallet available for payments (optional, default to false)
     * @return ApiResponse&lt;MakeCustomerPaymentResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MakeCustomerPaymentResults> makeCustomerPaymentWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, CustomerPaymentDetails customerPaymentDetails, String xAuthKey, String xAuthDigest, String xMessageId, Boolean xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = makeCustomerPaymentValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentRequestId, customerPaymentDetails, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<MakeCustomerPaymentResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pay Payment (asynchronously)
     * Pay a specific payment using the instrument details provided
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param customerPaymentDetails  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet The makes instruments available in the everyday pay wallet available for payments (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist, has been used or is expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call makeCustomerPaymentAsync(String xApiKey, String authorization, String xJWSSignature, String paymentRequestId, CustomerPaymentDetails customerPaymentDetails, String xAuthKey, String xAuthDigest, String xMessageId, Boolean xEverydayPayWallet, final ApiCallback<MakeCustomerPaymentResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeCustomerPaymentValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentRequestId, customerPaymentDetails, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<MakeCustomerPaymentResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preApprovePaymentSession
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session (required)
     * @param customerPaymentDetails1  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The pre approval has been successfully added to the payment session. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preApprovePaymentSessionCall(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, CustomerPaymentDetails1 customerPaymentDetails1, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customerPaymentDetails1;

        // create path and map variables
        String localVarPath = "/instore/customer/payment/session/{paymentSessionId}"
            .replaceAll("\\{" + "paymentSessionId" + "\\}", localVarApiClient.escapeString(paymentSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call preApprovePaymentSessionValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, CustomerPaymentDetails1 customerPaymentDetails1, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling preApprovePaymentSession(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling preApprovePaymentSession(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling preApprovePaymentSession(Async)");
        }
        
        // verify the required parameter 'paymentSessionId' is set
        if (paymentSessionId == null) {
            throw new ApiException("Missing the required parameter 'paymentSessionId' when calling preApprovePaymentSession(Async)");
        }
        
        // verify the required parameter 'customerPaymentDetails1' is set
        if (customerPaymentDetails1 == null) {
            throw new ApiException("Missing the required parameter 'customerPaymentDetails1' when calling preApprovePaymentSession(Async)");
        }
        

        okhttp3.Call localVarCall = preApprovePaymentSessionCall(xApiKey, authorization, xJWSSignature, paymentSessionId, customerPaymentDetails1, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Pre-Approve payment
     * Pre-Approve a payment session to make a payment using the instrument details provided
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session (required)
     * @param customerPaymentDetails1  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The pre approval has been successfully added to the payment session. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public void preApprovePaymentSession(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, CustomerPaymentDetails1 customerPaymentDetails1, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        preApprovePaymentSessionWithHttpInfo(xApiKey, authorization, xJWSSignature, paymentSessionId, customerPaymentDetails1, xAuthKey, xAuthDigest, xMessageId);
    }

    /**
     * Pre-Approve payment
     * Pre-Approve a payment session to make a payment using the instrument details provided
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session (required)
     * @param customerPaymentDetails1  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The pre approval has been successfully added to the payment session. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> preApprovePaymentSessionWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, CustomerPaymentDetails1 customerPaymentDetails1, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = preApprovePaymentSessionValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentSessionId, customerPaymentDetails1, xAuthKey, xAuthDigest, xMessageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Pre-Approve payment (asynchronously)
     * Pre-Approve a payment session to make a payment using the instrument details provided
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param paymentSessionId The ID of the specific payment session (required)
     * @param customerPaymentDetails1  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The pre approval has been successfully added to the payment session. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call preApprovePaymentSessionAsync(String xApiKey, String authorization, String xJWSSignature, String paymentSessionId, CustomerPaymentDetails1 customerPaymentDetails1, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = preApprovePaymentSessionValidateBeforeCall(xApiKey, authorization, xJWSSignature, paymentSessionId, customerPaymentDetails1, xAuthKey, xAuthDigest, xMessageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setCustomerPreferences
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param customerPreferences  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCustomerPreferencesCall(String xApiKey, String authorization, String xJWSSignature, CustomerPreferences customerPreferences, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customerPreferences;

        // create path and map variables
        String localVarPath = "/instore/customer/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setCustomerPreferencesValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, CustomerPreferences customerPreferences, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling setCustomerPreferences(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling setCustomerPreferences(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling setCustomerPreferences(Async)");
        }
        
        // verify the required parameter 'customerPreferences' is set
        if (customerPreferences == null) {
            throw new ApiException("Missing the required parameter 'customerPreferences' when calling setCustomerPreferences(Async)");
        }
        

        okhttp3.Call localVarCall = setCustomerPreferencesCall(xApiKey, authorization, xJWSSignature, customerPreferences, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Set Preferences
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param customerPreferences  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public void setCustomerPreferences(String xApiKey, String authorization, String xJWSSignature, CustomerPreferences customerPreferences, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        setCustomerPreferencesWithHttpInfo(xApiKey, authorization, xJWSSignature, customerPreferences, xAuthKey, xAuthDigest, xMessageId);
    }

    /**
     * Set Preferences
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param customerPreferences  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setCustomerPreferencesWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, CustomerPreferences customerPreferences, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = setCustomerPreferencesValidateBeforeCall(xApiKey, authorization, xJWSSignature, customerPreferences, xAuthKey, xAuthDigest, xMessageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Preferences (asynchronously)
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param customerPreferences  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setCustomerPreferencesAsync(String xApiKey, String authorization, String xJWSSignature, CustomerPreferences customerPreferences, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setCustomerPreferencesValidateBeforeCall(xApiKey, authorization, xJWSSignature, customerPreferences, xAuthKey, xAuthDigest, xMessageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomerPaymentAgreement
     * @param xWalletID  (required)
     * @param paymentToken The ID of the specific payment agreement (required)
     * @param customerUpdatePaymentAgreementRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerPaymentAgreementCall(String xWalletID, String paymentToken, CustomerUpdatePaymentAgreementRequest customerUpdatePaymentAgreementRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customerUpdatePaymentAgreementRequest;

        // create path and map variables
        String localVarPath = "/instore/customer/payments/agreements/{paymentToken}"
            .replaceAll("\\{" + "paymentToken" + "\\}", localVarApiClient.escapeString(paymentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xWalletID != null) {
            localVarHeaderParams.put("X-Wallet-ID", localVarApiClient.parameterToString(xWalletID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerPaymentAgreementValidateBeforeCall(String xWalletID, String paymentToken, CustomerUpdatePaymentAgreementRequest customerUpdatePaymentAgreementRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xWalletID' is set
        if (xWalletID == null) {
            throw new ApiException("Missing the required parameter 'xWalletID' when calling updateCustomerPaymentAgreement(Async)");
        }
        
        // verify the required parameter 'paymentToken' is set
        if (paymentToken == null) {
            throw new ApiException("Missing the required parameter 'paymentToken' when calling updateCustomerPaymentAgreement(Async)");
        }
        
        // verify the required parameter 'customerUpdatePaymentAgreementRequest' is set
        if (customerUpdatePaymentAgreementRequest == null) {
            throw new ApiException("Missing the required parameter 'customerUpdatePaymentAgreementRequest' when calling updateCustomerPaymentAgreement(Async)");
        }
        

        okhttp3.Call localVarCall = updateCustomerPaymentAgreementCall(xWalletID, paymentToken, customerUpdatePaymentAgreementRequest, _callback);
        return localVarCall;

    }

    /**
     * Update Payment Agreement
     * Update an existing payment agreement
     * @param xWalletID  (required)
     * @param paymentToken The ID of the specific payment agreement (required)
     * @param customerUpdatePaymentAgreementRequest  (required)
     * @return CustomerPaymentAgreementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPaymentAgreementResponse updateCustomerPaymentAgreement(String xWalletID, String paymentToken, CustomerUpdatePaymentAgreementRequest customerUpdatePaymentAgreementRequest) throws ApiException {
        ApiResponse<CustomerPaymentAgreementResponse> localVarResp = updateCustomerPaymentAgreementWithHttpInfo(xWalletID, paymentToken, customerUpdatePaymentAgreementRequest);
        return localVarResp.getData();
    }

    /**
     * Update Payment Agreement
     * Update an existing payment agreement
     * @param xWalletID  (required)
     * @param paymentToken The ID of the specific payment agreement (required)
     * @param customerUpdatePaymentAgreementRequest  (required)
     * @return ApiResponse&lt;CustomerPaymentAgreementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPaymentAgreementResponse> updateCustomerPaymentAgreementWithHttpInfo(String xWalletID, String paymentToken, CustomerUpdatePaymentAgreementRequest customerUpdatePaymentAgreementRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerPaymentAgreementValidateBeforeCall(xWalletID, paymentToken, customerUpdatePaymentAgreementRequest, null);
        Type localVarReturnType = new TypeToken<CustomerPaymentAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Payment Agreement (asynchronously)
     * Update an existing payment agreement
     * @param xWalletID  (required)
     * @param paymentToken The ID of the specific payment agreement (required)
     * @param customerUpdatePaymentAgreementRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get, Create and Update Payment Agreements </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerPaymentAgreementAsync(String xWalletID, String paymentToken, CustomerUpdatePaymentAgreementRequest customerUpdatePaymentAgreementRequest, final ApiCallback<CustomerPaymentAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerPaymentAgreementValidateBeforeCall(xWalletID, paymentToken, customerUpdatePaymentAgreementRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerPaymentAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
