/*
 * Village Wallet
 * APIs for Village Wallet
 *
 * The version of the OpenAPI document: 0.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.api;

import au.com.woolworths.village.sdk.openapi.client.ApiCallback;
import au.com.woolworths.village.sdk.openapi.client.ApiClient;
import au.com.woolworths.village.sdk.openapi.client.ApiException;
import au.com.woolworths.village.sdk.openapi.client.ApiResponse;
import au.com.woolworths.village.sdk.openapi.client.Configuration;
import au.com.woolworths.village.sdk.openapi.client.Pair;
import au.com.woolworths.village.sdk.openapi.client.ProgressRequestBody;
import au.com.woolworths.village.sdk.openapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import au.com.woolworths.village.sdk.openapi.dto.CreateMerchantPaymentSessionResponse;
import au.com.woolworths.village.sdk.openapi.dto.CreateMerchantSchemaResults;
import au.com.woolworths.village.sdk.openapi.dto.CreatePaymentRequestQRCodeResults;
import au.com.woolworths.village.sdk.openapi.dto.CreatePaymentRequestResults;
import au.com.woolworths.village.sdk.openapi.dto.CreatePaymentSessionRequest;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPaymentSessionResult;
import au.com.woolworths.village.sdk.openapi.dto.CustomerPreferencesResult;
import au.com.woolworths.village.sdk.openapi.dto.Error;
import au.com.woolworths.village.sdk.openapi.dto.GetMerchantPaymentDetailsResults;
import au.com.woolworths.village.sdk.openapi.dto.GetMerchantPaymentsResults;
import au.com.woolworths.village.sdk.openapi.dto.GetMerchantTransactionDetailsResults;
import au.com.woolworths.village.sdk.openapi.dto.GetMerchantTransactionsResults;
import au.com.woolworths.village.sdk.openapi.dto.MerchantPaymentRequest;
import au.com.woolworths.village.sdk.openapi.dto.MerchantPreferences;
import au.com.woolworths.village.sdk.openapi.dto.MerchantSchema;
import au.com.woolworths.village.sdk.openapi.dto.MerchantSchemaDetailsResult;
import au.com.woolworths.village.sdk.openapi.dto.MerchantSchemaResult;
import org.threeten.bp.OffsetDateTime;
import au.com.woolworths.village.sdk.openapi.dto.PaymentQRCodeDetails;
import au.com.woolworths.village.sdk.openapi.dto.RefundMerchantTransactionRequest;
import au.com.woolworths.village.sdk.openapi.dto.RefundMerchantTransactionResults;
import au.com.woolworths.village.sdk.openapi.dto.UpdatePaymentSessionRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantApi {
    private ApiClient localVarApiClient;

    public MerchantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for cancelPaymentRequestQRCode
     * @param xMerchantID  (required)
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> QR code has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The QR code specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelPaymentRequestQRCodeCall(String xMerchantID, String qrId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/qr/{qrId}"
            .replaceAll("\\{" + "qrId" + "\\}", localVarApiClient.escapeString(qrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelPaymentRequestQRCodeValidateBeforeCall(String xMerchantID, String qrId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling cancelPaymentRequestQRCode(Async)");
        }
        
        // verify the required parameter 'qrId' is set
        if (qrId == null) {
            throw new ApiException("Missing the required parameter 'qrId' when calling cancelPaymentRequestQRCode(Async)");
        }
        

        okhttp3.Call localVarCall = cancelPaymentRequestQRCodeCall(xMerchantID, qrId, _callback);
        return localVarCall;

    }

    /**
     * Invalidate QR Code
     * Cancel an existing QC code.  Effectively expires the QR code
     * @param xMerchantID  (required)
     * @param qrId The ID of the specific QR Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> QR code has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The QR code specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public void cancelPaymentRequestQRCode(String xMerchantID, String qrId) throws ApiException {
        cancelPaymentRequestQRCodeWithHttpInfo(xMerchantID, qrId);
    }

    /**
     * Invalidate QR Code
     * Cancel an existing QC code.  Effectively expires the QR code
     * @param xMerchantID  (required)
     * @param qrId The ID of the specific QR Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> QR code has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The QR code specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelPaymentRequestQRCodeWithHttpInfo(String xMerchantID, String qrId) throws ApiException {
        okhttp3.Call localVarCall = cancelPaymentRequestQRCodeValidateBeforeCall(xMerchantID, qrId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Invalidate QR Code (asynchronously)
     * Cancel an existing QC code.  Effectively expires the QR code
     * @param xMerchantID  (required)
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> QR code has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The QR code specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelPaymentRequestQRCodeAsync(String xMerchantID, String qrId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelPaymentRequestQRCodeValidateBeforeCall(xMerchantID, qrId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMerchantSchema
     * @param xMerchantID  (required)
     * @param merchantSchema  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMerchantSchemaCall(String xMerchantID, MerchantSchema merchantSchema, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantSchema;

        // create path and map variables
        String localVarPath = "/merchant/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMerchantSchemaValidateBeforeCall(String xMerchantID, MerchantSchema merchantSchema, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling createMerchantSchema(Async)");
        }
        
        // verify the required parameter 'merchantSchema' is set
        if (merchantSchema == null) {
            throw new ApiException("Missing the required parameter 'merchantSchema' when calling createMerchantSchema(Async)");
        }
        

        okhttp3.Call localVarCall = createMerchantSchemaCall(xMerchantID, merchantSchema, _callback);
        return localVarCall;

    }

    /**
     * Add Schema
     * Add a new schema that can be used in schema based payloads for this merchant
     * @param xMerchantID  (required)
     * @param merchantSchema  (required)
     * @return CreateMerchantSchemaResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreateMerchantSchemaResults createMerchantSchema(String xMerchantID, MerchantSchema merchantSchema) throws ApiException {
        ApiResponse<CreateMerchantSchemaResults> localVarResp = createMerchantSchemaWithHttpInfo(xMerchantID, merchantSchema);
        return localVarResp.getData();
    }

    /**
     * Add Schema
     * Add a new schema that can be used in schema based payloads for this merchant
     * @param xMerchantID  (required)
     * @param merchantSchema  (required)
     * @return ApiResponse&lt;CreateMerchantSchemaResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMerchantSchemaResults> createMerchantSchemaWithHttpInfo(String xMerchantID, MerchantSchema merchantSchema) throws ApiException {
        okhttp3.Call localVarCall = createMerchantSchemaValidateBeforeCall(xMerchantID, merchantSchema, null);
        Type localVarReturnType = new TypeToken<CreateMerchantSchemaResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Schema (asynchronously)
     * Add a new schema that can be used in schema based payloads for this merchant
     * @param xMerchantID  (required)
     * @param merchantSchema  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMerchantSchemaAsync(String xMerchantID, MerchantSchema merchantSchema, final ApiCallback<CreateMerchantSchemaResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMerchantSchemaValidateBeforeCall(xMerchantID, merchantSchema, _callback);
        Type localVarReturnType = new TypeToken<CreateMerchantSchemaResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentRequest
     * @param xMerchantID  (required)
     * @param merchantPaymentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentRequestCall(String xMerchantID, MerchantPaymentRequest merchantPaymentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantPaymentRequest;

        // create path and map variables
        String localVarPath = "/merchant/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentRequestValidateBeforeCall(String xMerchantID, MerchantPaymentRequest merchantPaymentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling createPaymentRequest(Async)");
        }
        
        // verify the required parameter 'merchantPaymentRequest' is set
        if (merchantPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'merchantPaymentRequest' when calling createPaymentRequest(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentRequestCall(xMerchantID, merchantPaymentRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Payment
     * Create a new payment request that can then be presented to a customer for payment
     * @param xMerchantID  (required)
     * @param merchantPaymentRequest  (required)
     * @return CreatePaymentRequestResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentRequestResults createPaymentRequest(String xMerchantID, MerchantPaymentRequest merchantPaymentRequest) throws ApiException {
        ApiResponse<CreatePaymentRequestResults> localVarResp = createPaymentRequestWithHttpInfo(xMerchantID, merchantPaymentRequest);
        return localVarResp.getData();
    }

    /**
     * Create Payment
     * Create a new payment request that can then be presented to a customer for payment
     * @param xMerchantID  (required)
     * @param merchantPaymentRequest  (required)
     * @return ApiResponse&lt;CreatePaymentRequestResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePaymentRequestResults> createPaymentRequestWithHttpInfo(String xMerchantID, MerchantPaymentRequest merchantPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentRequestValidateBeforeCall(xMerchantID, merchantPaymentRequest, null);
        Type localVarReturnType = new TypeToken<CreatePaymentRequestResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment (asynchronously)
     * Create a new payment request that can then be presented to a customer for payment
     * @param xMerchantID  (required)
     * @param merchantPaymentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentRequestAsync(String xMerchantID, MerchantPaymentRequest merchantPaymentRequest, final ApiCallback<CreatePaymentRequestResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentRequestValidateBeforeCall(xMerchantID, merchantPaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePaymentRequestResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentRequestQRCode
     * @param xMerchantID  (required)
     * @param paymentQRCodeDetails  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentRequestQRCodeCall(String xMerchantID, PaymentQRCodeDetails paymentQRCodeDetails, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentQRCodeDetails;

        // create path and map variables
        String localVarPath = "/merchant/qr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentRequestQRCodeValidateBeforeCall(String xMerchantID, PaymentQRCodeDetails paymentQRCodeDetails, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling createPaymentRequestQRCode(Async)");
        }
        
        // verify the required parameter 'paymentQRCodeDetails' is set
        if (paymentQRCodeDetails == null) {
            throw new ApiException("Missing the required parameter 'paymentQRCodeDetails' when calling createPaymentRequestQRCode(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentRequestQRCodeCall(xMerchantID, paymentQRCodeDetails, _callback);
        return localVarCall;

    }

    /**
     * Create QR Code for a payment request
     * Create a new QR code for an existing payment request
     * @param xMerchantID  (required)
     * @param paymentQRCodeDetails  (required)
     * @return CreatePaymentRequestQRCodeResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentRequestQRCodeResults createPaymentRequestQRCode(String xMerchantID, PaymentQRCodeDetails paymentQRCodeDetails) throws ApiException {
        ApiResponse<CreatePaymentRequestQRCodeResults> localVarResp = createPaymentRequestQRCodeWithHttpInfo(xMerchantID, paymentQRCodeDetails);
        return localVarResp.getData();
    }

    /**
     * Create QR Code for a payment request
     * Create a new QR code for an existing payment request
     * @param xMerchantID  (required)
     * @param paymentQRCodeDetails  (required)
     * @return ApiResponse&lt;CreatePaymentRequestQRCodeResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePaymentRequestQRCodeResults> createPaymentRequestQRCodeWithHttpInfo(String xMerchantID, PaymentQRCodeDetails paymentQRCodeDetails) throws ApiException {
        okhttp3.Call localVarCall = createPaymentRequestQRCodeValidateBeforeCall(xMerchantID, paymentQRCodeDetails, null);
        Type localVarReturnType = new TypeToken<CreatePaymentRequestQRCodeResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create QR Code for a payment request (asynchronously)
     * Create a new QR code for an existing payment request
     * @param xMerchantID  (required)
     * @param paymentQRCodeDetails  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentRequestQRCodeAsync(String xMerchantID, PaymentQRCodeDetails paymentQRCodeDetails, final ApiCallback<CreatePaymentRequestQRCodeResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentRequestQRCodeValidateBeforeCall(xMerchantID, paymentQRCodeDetails, _callback);
        Type localVarReturnType = new TypeToken<CreatePaymentRequestQRCodeResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentSession
     * @param xMerchantID  (required)
     * @param createPaymentSessionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentSessionCall(String xMerchantID, CreatePaymentSessionRequest createPaymentSessionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createPaymentSessionRequest;

        // create path and map variables
        String localVarPath = "/merchant/payment/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentSessionValidateBeforeCall(String xMerchantID, CreatePaymentSessionRequest createPaymentSessionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling createPaymentSession(Async)");
        }
        
        // verify the required parameter 'createPaymentSessionRequest' is set
        if (createPaymentSessionRequest == null) {
            throw new ApiException("Missing the required parameter 'createPaymentSessionRequest' when calling createPaymentSession(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentSessionCall(xMerchantID, createPaymentSessionRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Payment Session
     * Create a new payment session
     * @param xMerchantID  (required)
     * @param createPaymentSessionRequest  (required)
     * @return CreateMerchantPaymentSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public CreateMerchantPaymentSessionResponse createPaymentSession(String xMerchantID, CreatePaymentSessionRequest createPaymentSessionRequest) throws ApiException {
        ApiResponse<CreateMerchantPaymentSessionResponse> localVarResp = createPaymentSessionWithHttpInfo(xMerchantID, createPaymentSessionRequest);
        return localVarResp.getData();
    }

    /**
     * Create Payment Session
     * Create a new payment session
     * @param xMerchantID  (required)
     * @param createPaymentSessionRequest  (required)
     * @return ApiResponse&lt;CreateMerchantPaymentSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMerchantPaymentSessionResponse> createPaymentSessionWithHttpInfo(String xMerchantID, CreatePaymentSessionRequest createPaymentSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentSessionValidateBeforeCall(xMerchantID, createPaymentSessionRequest, null);
        Type localVarReturnType = new TypeToken<CreateMerchantPaymentSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment Session (asynchronously)
     * Create a new payment session
     * @param xMerchantID  (required)
     * @param createPaymentSessionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentSessionAsync(String xMerchantID, CreatePaymentSessionRequest createPaymentSessionRequest, final ApiCallback<CreateMerchantPaymentSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentSessionValidateBeforeCall(xMerchantID, createPaymentSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateMerchantPaymentSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMerchantPaymentRequest
     * @param xMerchantID  (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment request has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The payment request specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMerchantPaymentRequestCall(String xMerchantID, String paymentRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/payments/{paymentRequestId}"
            .replaceAll("\\{" + "paymentRequestId" + "\\}", localVarApiClient.escapeString(paymentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMerchantPaymentRequestValidateBeforeCall(String xMerchantID, String paymentRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling deleteMerchantPaymentRequest(Async)");
        }
        
        // verify the required parameter 'paymentRequestId' is set
        if (paymentRequestId == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestId' when calling deleteMerchantPaymentRequest(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMerchantPaymentRequestCall(xMerchantID, paymentRequestId, _callback);
        return localVarCall;

    }

    /**
     * Delete Payment Request
     * Cancel an existing payment by setting the expiration date/time to now and setting the remaining uses to 0.  Will only be successful if the payment is still pending.  Completed payments need to be refunded using the dedicated API for that purpose
     * @param xMerchantID  (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment request has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The payment request specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMerchantPaymentRequest(String xMerchantID, String paymentRequestId) throws ApiException {
        deleteMerchantPaymentRequestWithHttpInfo(xMerchantID, paymentRequestId);
    }

    /**
     * Delete Payment Request
     * Cancel an existing payment by setting the expiration date/time to now and setting the remaining uses to 0.  Will only be successful if the payment is still pending.  Completed payments need to be refunded using the dedicated API for that purpose
     * @param xMerchantID  (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment request has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The payment request specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMerchantPaymentRequestWithHttpInfo(String xMerchantID, String paymentRequestId) throws ApiException {
        okhttp3.Call localVarCall = deleteMerchantPaymentRequestValidateBeforeCall(xMerchantID, paymentRequestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Payment Request (asynchronously)
     * Cancel an existing payment by setting the expiration date/time to now and setting the remaining uses to 0.  Will only be successful if the payment is still pending.  Completed payments need to be refunded using the dedicated API for that purpose
     * @param xMerchantID  (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Payment request has been successfully expired.  Not content returned </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The payment request specified doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMerchantPaymentRequestAsync(String xMerchantID, String paymentRequestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMerchantPaymentRequestValidateBeforeCall(xMerchantID, paymentRequestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePaymentSession
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully deleted. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentSessionCall(String xMerchantID, String paymentSessionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/payment/session/{paymentSessionId}"
            .replaceAll("\\{" + "paymentSessionId" + "\\}", localVarApiClient.escapeString(paymentSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePaymentSessionValidateBeforeCall(String xMerchantID, String paymentSessionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling deletePaymentSession(Async)");
        }
        
        // verify the required parameter 'paymentSessionId' is set
        if (paymentSessionId == null) {
            throw new ApiException("Missing the required parameter 'paymentSessionId' when calling deletePaymentSession(Async)");
        }
        

        okhttp3.Call localVarCall = deletePaymentSessionCall(xMerchantID, paymentSessionId, _callback);
        return localVarCall;

    }

    /**
     * Delete Payment Session
     * Deletes a payment session by setting its expiration date/time to now
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully deleted. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePaymentSession(String xMerchantID, String paymentSessionId) throws ApiException {
        deletePaymentSessionWithHttpInfo(xMerchantID, paymentSessionId);
    }

    /**
     * Delete Payment Session
     * Deletes a payment session by setting its expiration date/time to now
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully deleted. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePaymentSessionWithHttpInfo(String xMerchantID, String paymentSessionId) throws ApiException {
        okhttp3.Call localVarCall = deletePaymentSessionValidateBeforeCall(xMerchantID, paymentSessionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Payment Session (asynchronously)
     * Deletes a payment session by setting its expiration date/time to now
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully deleted. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentSessionAsync(String xMerchantID, String paymentSessionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePaymentSessionValidateBeforeCall(xMerchantID, paymentSessionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantPaymentDetails
     * @param xMerchantID  (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPaymentDetailsCall(String xMerchantID, String paymentRequestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/payments/{paymentRequestId}"
            .replaceAll("\\{" + "paymentRequestId" + "\\}", localVarApiClient.escapeString(paymentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantPaymentDetailsValidateBeforeCall(String xMerchantID, String paymentRequestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getMerchantPaymentDetails(Async)");
        }
        
        // verify the required parameter 'paymentRequestId' is set
        if (paymentRequestId == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestId' when calling getMerchantPaymentDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantPaymentDetailsCall(xMerchantID, paymentRequestId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Details
     * Get the details for a specific payment.  Provides all types of payments and all payment content
     * @param xMerchantID  (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @return GetMerchantPaymentDetailsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantPaymentDetailsResults getMerchantPaymentDetails(String xMerchantID, String paymentRequestId) throws ApiException {
        ApiResponse<GetMerchantPaymentDetailsResults> localVarResp = getMerchantPaymentDetailsWithHttpInfo(xMerchantID, paymentRequestId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Details
     * Get the details for a specific payment.  Provides all types of payments and all payment content
     * @param xMerchantID  (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @return ApiResponse&lt;GetMerchantPaymentDetailsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantPaymentDetailsResults> getMerchantPaymentDetailsWithHttpInfo(String xMerchantID, String paymentRequestId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantPaymentDetailsValidateBeforeCall(xMerchantID, paymentRequestId, null);
        Type localVarReturnType = new TypeToken<GetMerchantPaymentDetailsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Details (asynchronously)
     * Get the details for a specific payment.  Provides all types of payments and all payment content
     * @param xMerchantID  (required)
     * @param paymentRequestId The ID of the specific payment request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Request ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPaymentDetailsAsync(String xMerchantID, String paymentRequestId, final ApiCallback<GetMerchantPaymentDetailsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantPaymentDetailsValidateBeforeCall(xMerchantID, paymentRequestId, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantPaymentDetailsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantPayments
     * @param xMerchantID  (required)
     * @param type The type of payment requests to return: active, inactive or both (optional, default to ACTIVE)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPaymentsCall(String xMerchantID, String type, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantPaymentsValidateBeforeCall(String xMerchantID, String type, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getMerchantPayments(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantPaymentsCall(xMerchantID, type, pageSize, page, _callback);
        return localVarCall;

    }

    /**
     * Get Payment List
     * Get a list of the payments initiated by the merchant, both pending and complete
     * @param xMerchantID  (required)
     * @param type The type of payment requests to return: active, inactive or both (optional, default to ACTIVE)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return GetMerchantPaymentsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantPaymentsResults getMerchantPayments(String xMerchantID, String type, Integer pageSize, Integer page) throws ApiException {
        ApiResponse<GetMerchantPaymentsResults> localVarResp = getMerchantPaymentsWithHttpInfo(xMerchantID, type, pageSize, page);
        return localVarResp.getData();
    }

    /**
     * Get Payment List
     * Get a list of the payments initiated by the merchant, both pending and complete
     * @param xMerchantID  (required)
     * @param type The type of payment requests to return: active, inactive or both (optional, default to ACTIVE)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return ApiResponse&lt;GetMerchantPaymentsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantPaymentsResults> getMerchantPaymentsWithHttpInfo(String xMerchantID, String type, Integer pageSize, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getMerchantPaymentsValidateBeforeCall(xMerchantID, type, pageSize, page, null);
        Type localVarReturnType = new TypeToken<GetMerchantPaymentsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment List (asynchronously)
     * Get a list of the payments initiated by the merchant, both pending and complete
     * @param xMerchantID  (required)
     * @param type The type of payment requests to return: active, inactive or both (optional, default to ACTIVE)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPaymentsAsync(String xMerchantID, String type, Integer pageSize, Integer page, final ApiCallback<GetMerchantPaymentsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantPaymentsValidateBeforeCall(xMerchantID, type, pageSize, page, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantPaymentsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantPreferences
     * @param xMerchantID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPreferencesCall(String xMerchantID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantPreferencesValidateBeforeCall(String xMerchantID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getMerchantPreferences(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantPreferencesCall(xMerchantID, _callback);
        return localVarCall;

    }

    /**
     * Get Preferences
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @param xMerchantID  (required)
     * @return CustomerPreferencesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPreferencesResult getMerchantPreferences(String xMerchantID) throws ApiException {
        ApiResponse<CustomerPreferencesResult> localVarResp = getMerchantPreferencesWithHttpInfo(xMerchantID);
        return localVarResp.getData();
    }

    /**
     * Get Preferences
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @param xMerchantID  (required)
     * @return ApiResponse&lt;CustomerPreferencesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPreferencesResult> getMerchantPreferencesWithHttpInfo(String xMerchantID) throws ApiException {
        okhttp3.Call localVarCall = getMerchantPreferencesValidateBeforeCall(xMerchantID, null);
        Type localVarReturnType = new TypeToken<CustomerPreferencesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Preferences (asynchronously)
     * Get the preferences previously set by the customer or merchant (depending on calling identity)
     * @param xMerchantID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantPreferencesAsync(String xMerchantID, final ApiCallback<CustomerPreferencesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantPreferencesValidateBeforeCall(xMerchantID, _callback);
        Type localVarReturnType = new TypeToken<CustomerPreferencesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantSchemaDetails
     * @param xMerchantID  (required)
     * @param schemaId The ID of the specific schema to get details for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantSchemaDetailsCall(String xMerchantID, String schemaId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/schema/{schemaId}"
            .replaceAll("\\{" + "schemaId" + "\\}", localVarApiClient.escapeString(schemaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantSchemaDetailsValidateBeforeCall(String xMerchantID, String schemaId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getMerchantSchemaDetails(Async)");
        }
        
        // verify the required parameter 'schemaId' is set
        if (schemaId == null) {
            throw new ApiException("Missing the required parameter 'schemaId' when calling getMerchantSchemaDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantSchemaDetailsCall(xMerchantID, schemaId, _callback);
        return localVarCall;

    }

    /**
     * Get Schema Details
     * Get the list of currently usable schema previously added for the merchant
     * @param xMerchantID  (required)
     * @param schemaId The ID of the specific schema to get details for (required)
     * @return MerchantSchemaDetailsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public MerchantSchemaDetailsResult getMerchantSchemaDetails(String xMerchantID, String schemaId) throws ApiException {
        ApiResponse<MerchantSchemaDetailsResult> localVarResp = getMerchantSchemaDetailsWithHttpInfo(xMerchantID, schemaId);
        return localVarResp.getData();
    }

    /**
     * Get Schema Details
     * Get the list of currently usable schema previously added for the merchant
     * @param xMerchantID  (required)
     * @param schemaId The ID of the specific schema to get details for (required)
     * @return ApiResponse&lt;MerchantSchemaDetailsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantSchemaDetailsResult> getMerchantSchemaDetailsWithHttpInfo(String xMerchantID, String schemaId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantSchemaDetailsValidateBeforeCall(xMerchantID, schemaId, null);
        Type localVarReturnType = new TypeToken<MerchantSchemaDetailsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Schema Details (asynchronously)
     * Get the list of currently usable schema previously added for the merchant
     * @param xMerchantID  (required)
     * @param schemaId The ID of the specific schema to get details for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantSchemaDetailsAsync(String xMerchantID, String schemaId, final ApiCallback<MerchantSchemaDetailsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantSchemaDetailsValidateBeforeCall(xMerchantID, schemaId, _callback);
        Type localVarReturnType = new TypeToken<MerchantSchemaDetailsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantSchemas
     * @param xMerchantID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantSchemasCall(String xMerchantID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantSchemasValidateBeforeCall(String xMerchantID, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getMerchantSchemas(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantSchemasCall(xMerchantID, _callback);
        return localVarCall;

    }

    /**
     * Get Schema List
     * Get the list of currently usable schema previously added for the merchant
     * @param xMerchantID  (required)
     * @return MerchantSchemaResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public MerchantSchemaResult getMerchantSchemas(String xMerchantID) throws ApiException {
        ApiResponse<MerchantSchemaResult> localVarResp = getMerchantSchemasWithHttpInfo(xMerchantID);
        return localVarResp.getData();
    }

    /**
     * Get Schema List
     * Get the list of currently usable schema previously added for the merchant
     * @param xMerchantID  (required)
     * @return ApiResponse&lt;MerchantSchemaResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantSchemaResult> getMerchantSchemasWithHttpInfo(String xMerchantID) throws ApiException {
        okhttp3.Call localVarCall = getMerchantSchemasValidateBeforeCall(xMerchantID, null);
        Type localVarReturnType = new TypeToken<MerchantSchemaResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Schema List (asynchronously)
     * Get the list of currently usable schema previously added for the merchant
     * @param xMerchantID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantSchemasAsync(String xMerchantID, final ApiCallback<MerchantSchemaResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantSchemasValidateBeforeCall(xMerchantID, _callback);
        Type localVarReturnType = new TypeToken<MerchantSchemaResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantTransactionDetails
     * @param xMerchantID  (required)
     * @param transactionId The ID of the specific transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransactionDetailsCall(String xMerchantID, String transactionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/transactions/{transactionId}"
            .replaceAll("\\{" + "transactionId" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantTransactionDetailsValidateBeforeCall(String xMerchantID, String transactionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getMerchantTransactionDetails(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getMerchantTransactionDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantTransactionDetailsCall(xMerchantID, transactionId, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction Details
     * Get the details for a specific transaction previously executed with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xMerchantID  (required)
     * @param transactionId The ID of the specific transaction (required)
     * @return GetMerchantTransactionDetailsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantTransactionDetailsResults getMerchantTransactionDetails(String xMerchantID, String transactionId) throws ApiException {
        ApiResponse<GetMerchantTransactionDetailsResults> localVarResp = getMerchantTransactionDetailsWithHttpInfo(xMerchantID, transactionId);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Details
     * Get the details for a specific transaction previously executed with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xMerchantID  (required)
     * @param transactionId The ID of the specific transaction (required)
     * @return ApiResponse&lt;GetMerchantTransactionDetailsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantTransactionDetailsResults> getMerchantTransactionDetailsWithHttpInfo(String xMerchantID, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantTransactionDetailsValidateBeforeCall(xMerchantID, transactionId, null);
        Type localVarReturnType = new TypeToken<GetMerchantTransactionDetailsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Details (asynchronously)
     * Get the details for a specific transaction previously executed with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xMerchantID  (required)
     * @param transactionId The ID of the specific transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransactionDetailsAsync(String xMerchantID, String transactionId, final ApiCallback<GetMerchantTransactionDetailsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantTransactionDetailsValidateBeforeCall(xMerchantID, transactionId, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantTransactionDetailsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantTransactions
     * @param xMerchantID  (required)
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransactionsCall(String xMerchantID, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-time", endTime));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantTransactionsValidateBeforeCall(String xMerchantID, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getMerchantTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantTransactionsCall(xMerchantID, startTime, endTime, pageSize, page, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction List
     * Get a list of the previously executed transactions with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xMerchantID  (required)
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return GetMerchantTransactionsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantTransactionsResults getMerchantTransactions(String xMerchantID, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page) throws ApiException {
        ApiResponse<GetMerchantTransactionsResults> localVarResp = getMerchantTransactionsWithHttpInfo(xMerchantID, startTime, endTime, pageSize, page);
        return localVarResp.getData();
    }

    /**
     * Get Transaction List
     * Get a list of the previously executed transactions with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xMerchantID  (required)
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return ApiResponse&lt;GetMerchantTransactionsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantTransactionsResults> getMerchantTransactionsWithHttpInfo(String xMerchantID, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getMerchantTransactionsValidateBeforeCall(xMerchantID, startTime, endTime, pageSize, page, null);
        Type localVarReturnType = new TypeToken<GetMerchantTransactionsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction List (asynchronously)
     * Get a list of the previously executed transactions with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
     * @param xMerchantID  (required)
     * @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
     * @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantTransactionsAsync(String xMerchantID, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, final ApiCallback<GetMerchantTransactionsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantTransactionsValidateBeforeCall(xMerchantID, startTime, endTime, pageSize, page, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantTransactionsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentRequestQRCodeContent
     * @param xMerchantID  (required)
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentRequestQRCodeContentCall(String xMerchantID, String qrId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/qr/{qrId}"
            .replaceAll("\\{" + "qrId" + "\\}", localVarApiClient.escapeString(qrId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentRequestQRCodeContentValidateBeforeCall(String xMerchantID, String qrId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getPaymentRequestQRCodeContent(Async)");
        }
        
        // verify the required parameter 'qrId' is set
        if (qrId == null) {
            throw new ApiException("Missing the required parameter 'qrId' when calling getPaymentRequestQRCodeContent(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentRequestQRCodeContentCall(xMerchantID, qrId, _callback);
        return localVarCall;

    }

    /**
     * Get QR Code Content
     * Obtain the content or an image for an existing QR code.  If requested content type is application/json then a payload will be returned.  if requested content is image/png an image will be returned
     * @param xMerchantID  (required)
     * @param qrId The ID of the specific QR Code (required)
     * @return CreatePaymentRequestQRCodeResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentRequestQRCodeResults getPaymentRequestQRCodeContent(String xMerchantID, String qrId) throws ApiException {
        ApiResponse<CreatePaymentRequestQRCodeResults> localVarResp = getPaymentRequestQRCodeContentWithHttpInfo(xMerchantID, qrId);
        return localVarResp.getData();
    }

    /**
     * Get QR Code Content
     * Obtain the content or an image for an existing QR code.  If requested content type is application/json then a payload will be returned.  if requested content is image/png an image will be returned
     * @param xMerchantID  (required)
     * @param qrId The ID of the specific QR Code (required)
     * @return ApiResponse&lt;CreatePaymentRequestQRCodeResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePaymentRequestQRCodeResults> getPaymentRequestQRCodeContentWithHttpInfo(String xMerchantID, String qrId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentRequestQRCodeContentValidateBeforeCall(xMerchantID, qrId, null);
        Type localVarReturnType = new TypeToken<CreatePaymentRequestQRCodeResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get QR Code Content (asynchronously)
     * Obtain the content or an image for an existing QR code.  If requested content type is application/json then a payload will be returned.  if requested content is image/png an image will be returned
     * @param xMerchantID  (required)
     * @param qrId The ID of the specific QR Code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified payment request doesn&#39;t exist or has already been closed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentRequestQRCodeContentAsync(String xMerchantID, String qrId, final ApiCallback<CreatePaymentRequestQRCodeResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentRequestQRCodeContentValidateBeforeCall(xMerchantID, qrId, _callback);
        Type localVarReturnType = new TypeToken<CreatePaymentRequestQRCodeResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentSession
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentSessionCall(String xMerchantID, String paymentSessionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchant/payment/session/{paymentSessionId}"
            .replaceAll("\\{" + "paymentSessionId" + "\\}", localVarApiClient.escapeString(paymentSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentSessionValidateBeforeCall(String xMerchantID, String paymentSessionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling getPaymentSession(Async)");
        }
        
        // verify the required parameter 'paymentSessionId' is set
        if (paymentSessionId == null) {
            throw new ApiException("Missing the required parameter 'paymentSessionId' when calling getPaymentSession(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentSessionCall(xMerchantID, paymentSessionId, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Session
     * Get the details of a payment session
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @return CustomerPaymentSessionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public CustomerPaymentSessionResult getPaymentSession(String xMerchantID, String paymentSessionId) throws ApiException {
        ApiResponse<CustomerPaymentSessionResult> localVarResp = getPaymentSessionWithHttpInfo(xMerchantID, paymentSessionId);
        return localVarResp.getData();
    }

    /**
     * Get Payment Session
     * Get the details of a payment session
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @return ApiResponse&lt;CustomerPaymentSessionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerPaymentSessionResult> getPaymentSessionWithHttpInfo(String xMerchantID, String paymentSessionId) throws ApiException {
        okhttp3.Call localVarCall = getPaymentSessionValidateBeforeCall(xMerchantID, paymentSessionId, null);
        Type localVarReturnType = new TypeToken<CustomerPaymentSessionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Session (asynchronously)
     * Get the details of a payment session
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The specified Payment Session ID doesn&#39;t exist or has expired </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentSessionAsync(String xMerchantID, String paymentSessionId, final ApiCallback<CustomerPaymentSessionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentSessionValidateBeforeCall(xMerchantID, paymentSessionId, _callback);
        Type localVarReturnType = new TypeToken<CustomerPaymentSessionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantUpdatePaymentSession
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param updatePaymentSessionRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully updated. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantUpdatePaymentSessionCall(String xMerchantID, String paymentSessionId, UpdatePaymentSessionRequest1 updatePaymentSessionRequest1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updatePaymentSessionRequest1;

        // create path and map variables
        String localVarPath = "/merchant/payment/session/{paymentSessionId}"
            .replaceAll("\\{" + "paymentSessionId" + "\\}", localVarApiClient.escapeString(paymentSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantUpdatePaymentSessionValidateBeforeCall(String xMerchantID, String paymentSessionId, UpdatePaymentSessionRequest1 updatePaymentSessionRequest1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling merchantUpdatePaymentSession(Async)");
        }
        
        // verify the required parameter 'paymentSessionId' is set
        if (paymentSessionId == null) {
            throw new ApiException("Missing the required parameter 'paymentSessionId' when calling merchantUpdatePaymentSession(Async)");
        }
        
        // verify the required parameter 'updatePaymentSessionRequest1' is set
        if (updatePaymentSessionRequest1 == null) {
            throw new ApiException("Missing the required parameter 'updatePaymentSessionRequest1' when calling merchantUpdatePaymentSession(Async)");
        }
        

        okhttp3.Call localVarCall = merchantUpdatePaymentSessionCall(xMerchantID, paymentSessionId, updatePaymentSessionRequest1, _callback);
        return localVarCall;

    }

    /**
     * Update Payment Session
     * Update the payment session details
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param updatePaymentSessionRequest1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully updated. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public void merchantUpdatePaymentSession(String xMerchantID, String paymentSessionId, UpdatePaymentSessionRequest1 updatePaymentSessionRequest1) throws ApiException {
        merchantUpdatePaymentSessionWithHttpInfo(xMerchantID, paymentSessionId, updatePaymentSessionRequest1);
    }

    /**
     * Update Payment Session
     * Update the payment session details
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param updatePaymentSessionRequest1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully updated. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> merchantUpdatePaymentSessionWithHttpInfo(String xMerchantID, String paymentSessionId, UpdatePaymentSessionRequest1 updatePaymentSessionRequest1) throws ApiException {
        okhttp3.Call localVarCall = merchantUpdatePaymentSessionValidateBeforeCall(xMerchantID, paymentSessionId, updatePaymentSessionRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Payment Session (asynchronously)
     * Update the payment session details
     * @param xMerchantID  (required)
     * @param paymentSessionId The ID of the specific payment session to retrieve (required)
     * @param updatePaymentSessionRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The payment session has been successfully updated. No content returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantUpdatePaymentSessionAsync(String xMerchantID, String paymentSessionId, UpdatePaymentSessionRequest1 updatePaymentSessionRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantUpdatePaymentSessionValidateBeforeCall(xMerchantID, paymentSessionId, updatePaymentSessionRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for refundMerchantTransaction
     * @param xMerchantID  (required)
     * @param transactionId The ID of the specific transaction to reverse (required)
     * @param refundMerchantTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The transaction specified doesn&#39;t exist or is a refund transaction already </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundMerchantTransactionCall(String xMerchantID, String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = refundMerchantTransactionRequest;

        // create path and map variables
        String localVarPath = "/merchant/transactions/{transactionId}/refund"
            .replaceAll("\\{" + "transactionId" + "\\}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refundMerchantTransactionValidateBeforeCall(String xMerchantID, String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling refundMerchantTransaction(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling refundMerchantTransaction(Async)");
        }
        
        // verify the required parameter 'refundMerchantTransactionRequest' is set
        if (refundMerchantTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'refundMerchantTransactionRequest' when calling refundMerchantTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = refundMerchantTransactionCall(xMerchantID, transactionId, refundMerchantTransactionRequest, _callback);
        return localVarCall;

    }

    /**
     * Refund Transaction
     * Refund a previously executed transaction
     * @param xMerchantID  (required)
     * @param transactionId The ID of the specific transaction to reverse (required)
     * @param refundMerchantTransactionRequest  (required)
     * @return RefundMerchantTransactionResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The transaction specified doesn&#39;t exist or is a refund transaction already </td><td>  -  </td></tr>
     </table>
     */
    public RefundMerchantTransactionResults refundMerchantTransaction(String xMerchantID, String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest) throws ApiException {
        ApiResponse<RefundMerchantTransactionResults> localVarResp = refundMerchantTransactionWithHttpInfo(xMerchantID, transactionId, refundMerchantTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Refund Transaction
     * Refund a previously executed transaction
     * @param xMerchantID  (required)
     * @param transactionId The ID of the specific transaction to reverse (required)
     * @param refundMerchantTransactionRequest  (required)
     * @return ApiResponse&lt;RefundMerchantTransactionResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The transaction specified doesn&#39;t exist or is a refund transaction already </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefundMerchantTransactionResults> refundMerchantTransactionWithHttpInfo(String xMerchantID, String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = refundMerchantTransactionValidateBeforeCall(xMerchantID, transactionId, refundMerchantTransactionRequest, null);
        Type localVarReturnType = new TypeToken<RefundMerchantTransactionResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refund Transaction (asynchronously)
     * Refund a previously executed transaction
     * @param xMerchantID  (required)
     * @param transactionId The ID of the specific transaction to reverse (required)
     * @param refundMerchantTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The transaction specified doesn&#39;t exist or is a refund transaction already </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundMerchantTransactionAsync(String xMerchantID, String transactionId, RefundMerchantTransactionRequest refundMerchantTransactionRequest, final ApiCallback<RefundMerchantTransactionResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = refundMerchantTransactionValidateBeforeCall(xMerchantID, transactionId, refundMerchantTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<RefundMerchantTransactionResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setMerchantPreferences
     * @param xMerchantID  (required)
     * @param merchantPreferences  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setMerchantPreferencesCall(String xMerchantID, MerchantPreferences merchantPreferences, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = merchantPreferences;

        // create path and map variables
        String localVarPath = "/merchant/preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xMerchantID != null) {
            localVarHeaderParams.put("X-Merchant-ID", localVarApiClient.parameterToString(xMerchantID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMerchantPreferencesValidateBeforeCall(String xMerchantID, MerchantPreferences merchantPreferences, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xMerchantID' is set
        if (xMerchantID == null) {
            throw new ApiException("Missing the required parameter 'xMerchantID' when calling setMerchantPreferences(Async)");
        }
        
        // verify the required parameter 'merchantPreferences' is set
        if (merchantPreferences == null) {
            throw new ApiException("Missing the required parameter 'merchantPreferences' when calling setMerchantPreferences(Async)");
        }
        

        okhttp3.Call localVarCall = setMerchantPreferencesCall(xMerchantID, merchantPreferences, _callback);
        return localVarCall;

    }

    /**
     * Set Preferences
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param xMerchantID  (required)
     * @param merchantPreferences  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public void setMerchantPreferences(String xMerchantID, MerchantPreferences merchantPreferences) throws ApiException {
        setMerchantPreferencesWithHttpInfo(xMerchantID, merchantPreferences);
    }

    /**
     * Set Preferences
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param xMerchantID  (required)
     * @param merchantPreferences  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setMerchantPreferencesWithHttpInfo(String xMerchantID, MerchantPreferences merchantPreferences) throws ApiException {
        okhttp3.Call localVarCall = setMerchantPreferencesValidateBeforeCall(xMerchantID, merchantPreferences, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Preferences (asynchronously)
     * Change the preferences for the customer or merchant (depending on calling identity)
     * @param xMerchantID  (required)
     * @param merchantPreferences  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Preferences successfully updated.  No content returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setMerchantPreferencesAsync(String xMerchantID, MerchantPreferences merchantPreferences, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMerchantPreferencesValidateBeforeCall(xMerchantID, merchantPreferences, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
