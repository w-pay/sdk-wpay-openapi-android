/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.dto;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * The presence of this object in the response indicates that payment agreements are allowed in the container for the relevant merchant.
 */
@ApiModel(description = "The presence of this object in the response indicates that payment agreements are allowed in the container for the relevant merchant.")

public class MerchantProfileResponseAllowedPaymentMethodsPaymentAgreement implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets allowedInstrumentTypes
   */
  @JsonAdapter(AllowedInstrumentTypesEnum.Adapter.class)
  public enum AllowedInstrumentTypesEnum {
    CREDIT_CARD("CREDIT_CARD"),
    
    PAYPAL("PAYPAL");

    private String value;

    AllowedInstrumentTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedInstrumentTypesEnum fromValue(String value) {
      for (AllowedInstrumentTypesEnum b : AllowedInstrumentTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedInstrumentTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedInstrumentTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedInstrumentTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedInstrumentTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_INSTRUMENT_TYPES = "allowedInstrumentTypes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_INSTRUMENT_TYPES)
  private List<AllowedInstrumentTypesEnum> allowedInstrumentTypes = new ArrayList<AllowedInstrumentTypesEnum>();

  /**
   * This property indicates the status of the payment agreement service in the container.
   */
  @JsonAdapter(ServiceStatusEnum.Adapter.class)
  public enum ServiceStatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    ServiceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceStatusEnum fromValue(String value) {
      for (ServiceStatusEnum b : ServiceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_STATUS = "serviceStatus";
  @SerializedName(SERIALIZED_NAME_SERVICE_STATUS)
  private ServiceStatusEnum serviceStatus;


  public MerchantProfileResponseAllowedPaymentMethodsPaymentAgreement allowedInstrumentTypes(List<AllowedInstrumentTypesEnum> allowedInstrumentTypes) {
    
    this.allowedInstrumentTypes = allowedInstrumentTypes;
    return this;
  }

  public MerchantProfileResponseAllowedPaymentMethodsPaymentAgreement addAllowedInstrumentTypesItem(AllowedInstrumentTypesEnum allowedInstrumentTypesItem) {
    this.allowedInstrumentTypes.add(allowedInstrumentTypesItem);
    return this;
  }

   /**
   * The allowed instrument types that can be used as the funding source of a payment agreement.
   * @return allowedInstrumentTypes
  **/
  @ApiModelProperty(required = true, value = "The allowed instrument types that can be used as the funding source of a payment agreement.")

  public List<AllowedInstrumentTypesEnum> getAllowedInstrumentTypes() {
    return allowedInstrumentTypes;
  }


  public void setAllowedInstrumentTypes(List<AllowedInstrumentTypesEnum> allowedInstrumentTypes) {
    this.allowedInstrumentTypes = allowedInstrumentTypes;
  }


  public MerchantProfileResponseAllowedPaymentMethodsPaymentAgreement serviceStatus(ServiceStatusEnum serviceStatus) {
    
    this.serviceStatus = serviceStatus;
    return this;
  }

   /**
   * This property indicates the status of the payment agreement service in the container.
   * @return serviceStatus
  **/
  @ApiModelProperty(required = true, value = "This property indicates the status of the payment agreement service in the container.")

  public ServiceStatusEnum getServiceStatus() {
    return serviceStatus;
  }


  public void setServiceStatus(ServiceStatusEnum serviceStatus) {
    this.serviceStatus = serviceStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantProfileResponseAllowedPaymentMethodsPaymentAgreement merchantProfileResponseAllowedPaymentMethodsPaymentAgreement = (MerchantProfileResponseAllowedPaymentMethodsPaymentAgreement) o;
    return Objects.equals(this.allowedInstrumentTypes, merchantProfileResponseAllowedPaymentMethodsPaymentAgreement.allowedInstrumentTypes) &&
        Objects.equals(this.serviceStatus, merchantProfileResponseAllowedPaymentMethodsPaymentAgreement.serviceStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedInstrumentTypes, serviceStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantProfileResponseAllowedPaymentMethodsPaymentAgreement {\n");
    sb.append("    allowedInstrumentTypes: ").append(toIndentedString(allowedInstrumentTypes)).append("\n");
    sb.append("    serviceStatus: ").append(toIndentedString(serviceStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

