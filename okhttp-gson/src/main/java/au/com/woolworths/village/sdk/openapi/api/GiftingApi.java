/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.api;

import com.google.gson.reflect.TypeToken;

import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import au.com.woolworths.village.sdk.openapi.client.ApiCallback;
import au.com.woolworths.village.sdk.openapi.client.ApiClient;
import au.com.woolworths.village.sdk.openapi.client.ApiException;
import au.com.woolworths.village.sdk.openapi.client.ApiResponse;
import au.com.woolworths.village.sdk.openapi.client.Configuration;
import au.com.woolworths.village.sdk.openapi.client.Pair;
import au.com.woolworths.village.sdk.openapi.dto.GiftingProductOrderRequest;
import au.com.woolworths.village.sdk.openapi.dto.GiftingProductQuoteRequest;
import au.com.woolworths.village.sdk.openapi.dto.InlineResponse200;
import au.com.woolworths.village.sdk.openapi.dto.InlineResponse2001;
import au.com.woolworths.village.sdk.openapi.dto.InlineResponse2002;
import au.com.woolworths.village.sdk.openapi.dto.InlineResponse2003;

public class GiftingApi {
    private ApiClient localVarApiClient;

    public GiftingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GiftingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for giftingProductsGet
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param lastUpdateDateTime If present, the date/time to limit products returned.  Only products changed since this time will be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftingProductsGetCall(String xApiKey, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, OffsetDateTime lastUpdateDateTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gifting/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lastUpdateDateTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last-update-date-time", lastUpdateDateTime));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call giftingProductsGetValidateBeforeCall(String xApiKey, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, OffsetDateTime lastUpdateDateTime, Integer pageSize, Integer page, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling giftingProductsGet(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling giftingProductsGet(Async)");
        }
        

        okhttp3.Call localVarCall = giftingProductsGetCall(xApiKey, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, lastUpdateDateTime, pageSize, page, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Gift Card Products
     * Obtains a list of available gift card products that can be purchased.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param lastUpdateDateTime If present, the date/time to limit products returned.  Only products changed since this time will be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 giftingProductsGet(String xApiKey, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, OffsetDateTime lastUpdateDateTime, Integer pageSize, Integer page) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = giftingProductsGetWithHttpInfo(xApiKey, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, lastUpdateDateTime, pageSize, page);
        return localVarResp.getData();
    }

    /**
     * Retrieve Gift Card Products
     * Obtains a list of available gift card products that can be purchased.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param lastUpdateDateTime If present, the date/time to limit products returned.  Only products changed since this time will be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> giftingProductsGetWithHttpInfo(String xApiKey, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, OffsetDateTime lastUpdateDateTime, Integer pageSize, Integer page) throws ApiException {
        okhttp3.Call localVarCall = giftingProductsGetValidateBeforeCall(xApiKey, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, lastUpdateDateTime, pageSize, page, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Gift Card Products (asynchronously)
     * Obtains a list of available gift card products that can be purchased.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param lastUpdateDateTime If present, the date/time to limit products returned.  Only products changed since this time will be returned (optional)
     * @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional, default to 25)
     * @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftingProductsGetAsync(String xApiKey, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, OffsetDateTime lastUpdateDateTime, Integer pageSize, Integer page, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = giftingProductsGetValidateBeforeCall(xApiKey, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, lastUpdateDateTime, pageSize, page, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for giftingProductsOrderPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param giftingProductOrderRequest Request payload containing instruments to use for the payment (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftingProductsOrderPostCall(String xApiKey, String xJWSSignature, GiftingProductOrderRequest giftingProductOrderRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = giftingProductOrderRequest;

        // create path and map variables
        String localVarPath = "/gifting/products/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call giftingProductsOrderPostValidateBeforeCall(String xApiKey, String xJWSSignature, GiftingProductOrderRequest giftingProductOrderRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling giftingProductsOrderPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling giftingProductsOrderPost(Async)");
        }
        
        // verify the required parameter 'giftingProductOrderRequest' is set
        if (giftingProductOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'giftingProductOrderRequest' when calling giftingProductsOrderPost(Async)");
        }
        

        okhttp3.Call localVarCall = giftingProductsOrderPostCall(xApiKey, xJWSSignature, giftingProductOrderRequest, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Order Gift Card
     * Order a gift card product.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param giftingProductOrderRequest Request payload containing instruments to use for the payment (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 giftingProductsOrderPost(String xApiKey, String xJWSSignature, GiftingProductOrderRequest giftingProductOrderRequest, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = giftingProductsOrderPostWithHttpInfo(xApiKey, xJWSSignature, giftingProductOrderRequest, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Order Gift Card
     * Order a gift card product.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param giftingProductOrderRequest Request payload containing instruments to use for the payment (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> giftingProductsOrderPostWithHttpInfo(String xApiKey, String xJWSSignature, GiftingProductOrderRequest giftingProductOrderRequest, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = giftingProductsOrderPostValidateBeforeCall(xApiKey, xJWSSignature, giftingProductOrderRequest, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order Gift Card (asynchronously)
     * Order a gift card product.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param giftingProductOrderRequest Request payload containing instruments to use for the payment (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftingProductsOrderPostAsync(String xApiKey, String xJWSSignature, GiftingProductOrderRequest giftingProductOrderRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = giftingProductsOrderPostValidateBeforeCall(xApiKey, xJWSSignature, giftingProductOrderRequest, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for giftingProductsProductIdGet
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param productId The ID of the specific gift card product (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftingProductsProductIdGetCall(String xApiKey, String xJWSSignature, String productId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gifting/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call giftingProductsProductIdGetValidateBeforeCall(String xApiKey, String xJWSSignature, String productId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling giftingProductsProductIdGet(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling giftingProductsProductIdGet(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling giftingProductsProductIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = giftingProductsProductIdGetCall(xApiKey, xJWSSignature, productId, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Gift Card Product Detail
     * Obtains a list of available gift card products that can be purchased.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param productId The ID of the specific gift card product (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 giftingProductsProductIdGet(String xApiKey, String xJWSSignature, String productId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = giftingProductsProductIdGetWithHttpInfo(xApiKey, xJWSSignature, productId, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Gift Card Product Detail
     * Obtains a list of available gift card products that can be purchased.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param productId The ID of the specific gift card product (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> giftingProductsProductIdGetWithHttpInfo(String xApiKey, String xJWSSignature, String productId, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = giftingProductsProductIdGetValidateBeforeCall(xApiKey, xJWSSignature, productId, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Gift Card Product Detail (asynchronously)
     * Obtains a list of available gift card products that can be purchased.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param productId The ID of the specific gift card product (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftingProductsProductIdGetAsync(String xApiKey, String xJWSSignature, String productId, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = giftingProductsProductIdGetValidateBeforeCall(xApiKey, xJWSSignature, productId, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for giftingProductsQuotePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param giftingProductQuoteRequest Request payload containing details of the order to quote on (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftingProductsQuotePostCall(String xApiKey, String xJWSSignature, GiftingProductQuoteRequest giftingProductQuoteRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = giftingProductQuoteRequest;

        // create path and map variables
        String localVarPath = "/gifting/products/quote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call giftingProductsQuotePostValidateBeforeCall(String xApiKey, String xJWSSignature, GiftingProductQuoteRequest giftingProductQuoteRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling giftingProductsQuotePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling giftingProductsQuotePost(Async)");
        }
        
        // verify the required parameter 'giftingProductQuoteRequest' is set
        if (giftingProductQuoteRequest == null) {
            throw new ApiException("Missing the required parameter 'giftingProductQuoteRequest' when calling giftingProductsQuotePost(Async)");
        }
        

        okhttp3.Call localVarCall = giftingProductsQuotePostCall(xApiKey, xJWSSignature, giftingProductQuoteRequest, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Obtain Gift Card Quote
     * Validates a gift card order and verifies discount prior to an order being placed.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param giftingProductQuoteRequest Request payload containing details of the order to quote on (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2002 giftingProductsQuotePost(String xApiKey, String xJWSSignature, GiftingProductQuoteRequest giftingProductQuoteRequest, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<InlineResponse2002> localVarResp = giftingProductsQuotePostWithHttpInfo(xApiKey, xJWSSignature, giftingProductQuoteRequest, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Obtain Gift Card Quote
     * Validates a gift card order and verifies discount prior to an order being placed.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param giftingProductQuoteRequest Request payload containing details of the order to quote on (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2002> giftingProductsQuotePostWithHttpInfo(String xApiKey, String xJWSSignature, GiftingProductQuoteRequest giftingProductQuoteRequest, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = giftingProductsQuotePostValidateBeforeCall(xApiKey, xJWSSignature, giftingProductQuoteRequest, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain Gift Card Quote (asynchronously)
     * Validates a gift card order and verifies discount prior to an order being placed.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param giftingProductQuoteRequest Request payload containing details of the order to quote on (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftingProductsQuotePostAsync(String xApiKey, String xJWSSignature, GiftingProductQuoteRequest giftingProductQuoteRequest, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<InlineResponse2002> _callback) throws ApiException {

        okhttp3.Call localVarCall = giftingProductsQuotePostValidateBeforeCall(xApiKey, xJWSSignature, giftingProductQuoteRequest, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
