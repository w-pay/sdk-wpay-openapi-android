/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.dto;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.io.Serializable;
import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * This object is only required if the payments request requires 3DS challenge response data to be sent to Digital Pay.
 */
@ApiModel(description = "This object is only required if the payments request requires 3DS challenge response data to be sent to Digital Pay.")

public class PaymentsRequestThreeDS implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_MESSAGE_VERSION = "messageVersion";
  @SerializedName(SERIALIZED_NAME_MESSAGE_VERSION)
  private String messageVersion;

  public static final String SERIALIZED_NAME_XID = "xid";
  @SerializedName(SERIALIZED_NAME_XID)
  private String xid;

  public static final String SERIALIZED_NAME_AUTHENTICATION_VALUE = "authenticationValue";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_VALUE)
  private String authenticationValue;

  public static final String SERIALIZED_NAME_DS_TRANS_I_D = "dsTransID";
  @SerializedName(SERIALIZED_NAME_DS_TRANS_I_D)
  private String dsTransID;

  public static final String SERIALIZED_NAME_ECI = "eci";
  @SerializedName(SERIALIZED_NAME_ECI)
  private String eci;

  /**
   * The payer authentication response status. Required for Visa.
   */
  @JsonAdapter(AresStatusEnum.Adapter.class)
  public enum AresStatusEnum {
    Y_CUSTOMER_WAS_SUCCESSFULLY_AUTHENTICATED("Y: Customer was successfully authenticated"),
    
    N_CUSTOMER_FAILED_OR_CANCELED_AUTHENTICATION("N: Customer failed or canceled authentication"),
    
    C_CARD_CHALLENGED("C: Card challenged"),
    
    R_AUTHENTICATION_REJECTED("R: Authentication rejected"),
    
    A_PROOF_OF_AUTHENTICATION_ATTEMPT_WAS_GENERATED("A: Proof of authentication attempt was generated"),
    
    U_AUTHENTICATION_NOT_COMPLETED_REGARDLESS_OF_THE_REASON("U: Authentication not completed regardless of the reason");

    private String value;

    AresStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AresStatusEnum fromValue(String value) {
      for (AresStatusEnum b : AresStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AresStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AresStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AresStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AresStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ARES_STATUS = "aresStatus";
  @SerializedName(SERIALIZED_NAME_ARES_STATUS)
  private AresStatusEnum aresStatus;

  /**
   * The verification response enrollment status. Required for Visa.
   */
  @JsonAdapter(VeresEnrolledEnum.Adapter.class)
  public enum VeresEnrolledEnum {
    Y_CARD_ENROLLED_MUST_AUTHENTICATE("Y: Card enrolled, must authenticate"),
    
    N_CARD_NOT_ENROLLED_PROCEED_WITH_AUTHORIZATION("N: Card not enrolled, proceed with authorization"),
    
    U_UNABLE_TO_AUTHENTICATE_REGARDLESS_OF_THE_REASON("U: Unable to authenticate regardless of the reason"),
    
    B_INDICATES_THAT_AUTHENTICATION_WAS_BYPASSED("B: Indicates that authentication was bypassed");

    private String value;

    VeresEnrolledEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VeresEnrolledEnum fromValue(String value) {
      for (VeresEnrolledEnum b : VeresEnrolledEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VeresEnrolledEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VeresEnrolledEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VeresEnrolledEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VeresEnrolledEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERES_ENROLLED = "veresEnrolled";
  @SerializedName(SERIALIZED_NAME_VERES_ENROLLED)
  private VeresEnrolledEnum veresEnrolled;

  /**
   * Indicates whether a transaction qualifies as an authenticated transaction or account verification.
   */
  @JsonAdapter(TransStatusEnum.Adapter.class)
  public enum TransStatusEnum {
    Y_AUTHENTICATION_SUCCESSFUL("Y: Authentication Successful"),
    
    N_NOT_AUTHENTICATED("N: Not Authenticated"),
    
    U_AUTHENTICATION_COULD_NOT_BE_PERFORMED("U: Authentication could not be performed"),
    
    A_ATTEMPTS_PROCESSING_PERFORMED_NOT_AUTHENTICATED("A: Attempts Processing Performed; Not authenticated"),
    
    C_CHALLENGE_REQUIRED_ADDITIONAL_AUTHENTICATION_IS_REQUIRED("C: Challenge Required. Additional authentication is required"),
    
    D_CHALLENGE_REQUIRED_DECOUPLED_AUTHENTICATION_PERFORMED("D: Challenge Required; Decoupled Authentication performed"),
    
    R_AUTHENTICATION_REJECTED_ISSUER_IS_REJECTING("R: Authentication Rejected. Issuer is rejecting"),
    
    I_INFORMATIONAL_ONLY("I: Informational Only");

    private String value;

    TransStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransStatusEnum fromValue(String value) {
      for (TransStatusEnum b : TransStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANS_STATUS = "transStatus";
  @SerializedName(SERIALIZED_NAME_TRANS_STATUS)
  private TransStatusEnum transStatus;

  public static final String SERIALIZED_NAME_SLI = "sli";
  @SerializedName(SERIALIZED_NAME_SLI)
  private String sli;


  public PaymentsRequestThreeDS messageVersion(String messageVersion) {
    
    this.messageVersion = messageVersion;
    return this;
  }

   /**
   * The Protocol Version Number of the specification utilised by the system creating this message.
   * @return messageVersion
  **/
  @ApiModelProperty(example = "2.2.0", required = true, value = "The Protocol Version Number of the specification utilised by the system creating this message.")

  public String getMessageVersion() {
    return messageVersion;
  }


  public void setMessageVersion(String messageVersion) {
    this.messageVersion = messageVersion;
  }


  public PaymentsRequestThreeDS xid(String xid) {
    
    this.xid = xid;
    return this;
  }

   /**
   * The transaction identifier. Required for Mastercard and Amex. Not applicable for Visa.
   * @return xid
  **/
  @ApiModelProperty(example = "313233343536373839303132333435363738", required = true, value = "The transaction identifier. Required for Mastercard and Amex. Not applicable for Visa.")

  public String getXid() {
    return xid;
  }


  public void setXid(String xid) {
    this.xid = xid;
  }


  public PaymentsRequestThreeDS authenticationValue(String authenticationValue) {
    
    this.authenticationValue = authenticationValue;
    return this;
  }

   /**
   * The payment system-specific value provided by the ACS or the Directory Server (DS) using an algorithm defined by Payment System.
   * @return authenticationValue
  **/
  @ApiModelProperty(example = "RGlkWW91UmVhbGx5Q2hlY2tJdCE=", required = true, value = "The payment system-specific value provided by the ACS or the Directory Server (DS) using an algorithm defined by Payment System.")

  public String getAuthenticationValue() {
    return authenticationValue;
  }


  public void setAuthenticationValue(String authenticationValue) {
    this.authenticationValue = authenticationValue;
  }


  public PaymentsRequestThreeDS dsTransID(String dsTransID) {
    
    this.dsTransID = dsTransID;
    return this;
  }

   /**
   * The Directory Server (DS) authentication identification code. A universally unique transaction identifier assigned by the DS to identify a single transaction. The format of the value is defined in IETF RFC 4122. It may utilise any of the specified versions if the output meets specific requirements.
   * @return dsTransID
  **/
  @ApiModelProperty(example = "f25084f0-5b16-4c0a-ae5d-b24808a95e4b", required = true, value = "The Directory Server (DS) authentication identification code. A universally unique transaction identifier assigned by the DS to identify a single transaction. The format of the value is defined in IETF RFC 4122. It may utilise any of the specified versions if the output meets specific requirements.")

  public String getDsTransID() {
    return dsTransID;
  }


  public void setDsTransID(String dsTransID) {
    this.dsTransID = dsTransID;
  }


  public PaymentsRequestThreeDS eci(String eci) {
    
    this.eci = eci;
    return this;
  }

   /**
   * The electronic commerce indicator. Required for calculating the SLI. A Payment System-specific value provided by the ACS or DS to indicate the results of the attempt to authenticate the Cardholder.
   * @return eci
  **/
  @ApiModelProperty(example = "For Mastercard: ('00','01','02') and for Visa: ('05','06','07')", required = true, value = "The electronic commerce indicator. Required for calculating the SLI. A Payment System-specific value provided by the ACS or DS to indicate the results of the attempt to authenticate the Cardholder.")

  public String getEci() {
    return eci;
  }


  public void setEci(String eci) {
    this.eci = eci;
  }


  public PaymentsRequestThreeDS aresStatus(AresStatusEnum aresStatus) {
    
    this.aresStatus = aresStatus;
    return this;
  }

   /**
   * The payer authentication response status. Required for Visa.
   * @return aresStatus
  **/
  @ApiModelProperty(example = "Y", required = true, value = "The payer authentication response status. Required for Visa.")

  public AresStatusEnum getAresStatus() {
    return aresStatus;
  }


  public void setAresStatus(AresStatusEnum aresStatus) {
    this.aresStatus = aresStatus;
  }


  public PaymentsRequestThreeDS veresEnrolled(VeresEnrolledEnum veresEnrolled) {
    
    this.veresEnrolled = veresEnrolled;
    return this;
  }

   /**
   * The verification response enrollment status. Required for Visa.
   * @return veresEnrolled
  **/
  @ApiModelProperty(example = "Y", required = true, value = "The verification response enrollment status. Required for Visa.")

  public VeresEnrolledEnum getVeresEnrolled() {
    return veresEnrolled;
  }


  public void setVeresEnrolled(VeresEnrolledEnum veresEnrolled) {
    this.veresEnrolled = veresEnrolled;
  }


  public PaymentsRequestThreeDS transStatus(TransStatusEnum transStatus) {
    
    this.transStatus = transStatus;
    return this;
  }

   /**
   * Indicates whether a transaction qualifies as an authenticated transaction or account verification.
   * @return transStatus
  **/
  @ApiModelProperty(example = "Y", required = true, value = "Indicates whether a transaction qualifies as an authenticated transaction or account verification.")

  public TransStatusEnum getTransStatus() {
    return transStatus;
  }


  public void setTransStatus(TransStatusEnum transStatus) {
    this.transStatus = transStatus;
  }


  public PaymentsRequestThreeDS sli(String sli) {
    
    this.sli = sli;
    return this;
  }

   /**
   * The SLI from the merchant.
   * @return sli
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "07", value = "The SLI from the merchant.")

  public String getSli() {
    return sli;
  }


  public void setSli(String sli) {
    this.sli = sli;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsRequestThreeDS paymentsRequestThreeDS = (PaymentsRequestThreeDS) o;
    return Objects.equals(this.messageVersion, paymentsRequestThreeDS.messageVersion) &&
        Objects.equals(this.xid, paymentsRequestThreeDS.xid) &&
        Objects.equals(this.authenticationValue, paymentsRequestThreeDS.authenticationValue) &&
        Objects.equals(this.dsTransID, paymentsRequestThreeDS.dsTransID) &&
        Objects.equals(this.eci, paymentsRequestThreeDS.eci) &&
        Objects.equals(this.aresStatus, paymentsRequestThreeDS.aresStatus) &&
        Objects.equals(this.veresEnrolled, paymentsRequestThreeDS.veresEnrolled) &&
        Objects.equals(this.transStatus, paymentsRequestThreeDS.transStatus) &&
        Objects.equals(this.sli, paymentsRequestThreeDS.sli);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageVersion, xid, authenticationValue, dsTransID, eci, aresStatus, veresEnrolled, transStatus, sli);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsRequestThreeDS {\n");
    sb.append("    messageVersion: ").append(toIndentedString(messageVersion)).append("\n");
    sb.append("    xid: ").append(toIndentedString(xid)).append("\n");
    sb.append("    authenticationValue: ").append(toIndentedString(authenticationValue)).append("\n");
    sb.append("    dsTransID: ").append(toIndentedString(dsTransID)).append("\n");
    sb.append("    eci: ").append(toIndentedString(eci)).append("\n");
    sb.append("    aresStatus: ").append(toIndentedString(aresStatus)).append("\n");
    sb.append("    veresEnrolled: ").append(toIndentedString(veresEnrolled)).append("\n");
    sb.append("    transStatus: ").append(toIndentedString(transStatus)).append("\n");
    sb.append("    sli: ").append(toIndentedString(sli)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

