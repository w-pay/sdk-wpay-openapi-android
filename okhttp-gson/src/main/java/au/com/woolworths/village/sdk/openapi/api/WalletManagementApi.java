/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.api;

import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import au.com.woolworths.village.sdk.openapi.client.ApiCallback;
import au.com.woolworths.village.sdk.openapi.client.ApiClient;
import au.com.woolworths.village.sdk.openapi.client.ApiException;
import au.com.woolworths.village.sdk.openapi.client.ApiResponse;
import au.com.woolworths.village.sdk.openapi.client.Configuration;
import au.com.woolworths.village.sdk.openapi.client.Pair;
import au.com.woolworths.village.sdk.openapi.dto.DeleteWalletRequest;
import au.com.woolworths.village.sdk.openapi.dto.GiftcardsBalanceRequest;
import au.com.woolworths.village.sdk.openapi.dto.GiftcardsBalanceResponse;
import au.com.woolworths.village.sdk.openapi.dto.GuestTokenizeApplePayRequest;
import au.com.woolworths.village.sdk.openapi.dto.GuestTokenizeGiftcardRequest;
import au.com.woolworths.village.sdk.openapi.dto.GuestTokenizeGiftcardResponse;
import au.com.woolworths.village.sdk.openapi.dto.GuestTokenizePaypalRequest;
import au.com.woolworths.village.sdk.openapi.dto.GuestTokenizePaypalResponse;
import au.com.woolworths.village.sdk.openapi.dto.ImportPaymentInstrumentsRequest;
import au.com.woolworths.village.sdk.openapi.dto.ImportPaymentInstrumentsResponse;
import au.com.woolworths.village.sdk.openapi.dto.InitiateCardCaptureRequest;
import au.com.woolworths.village.sdk.openapi.dto.InitiateCardCaptureResponse;
import au.com.woolworths.village.sdk.openapi.dto.ListPaymentInstrumentsRequest;
import au.com.woolworths.village.sdk.openapi.dto.ListPaymentInstrumentsResponse;
import au.com.woolworths.village.sdk.openapi.dto.MerchantProfileResponse;
import au.com.woolworths.village.sdk.openapi.dto.TokenizeAndroidPayRequest;
import au.com.woolworths.village.sdk.openapi.dto.TokenizeAndroidPayResponse;
import au.com.woolworths.village.sdk.openapi.dto.TokenizeApplePayRequest;
import au.com.woolworths.village.sdk.openapi.dto.TokenizeApplePayResponse;
import au.com.woolworths.village.sdk.openapi.dto.TokenizeGiftcardRequest;
import au.com.woolworths.village.sdk.openapi.dto.TokenizeGiftcardResponse;
import au.com.woolworths.village.sdk.openapi.dto.TokenizeGooglePayRequest;
import au.com.woolworths.village.sdk.openapi.dto.TokenizeGooglePayResponse;
import au.com.woolworths.village.sdk.openapi.dto.TokenizePaypalRequest;
import au.com.woolworths.village.sdk.openapi.dto.TokenizePaypalResponse;
import au.com.woolworths.village.sdk.openapi.dto.TransactionHistoryRequest;
import au.com.woolworths.village.sdk.openapi.dto.TransactionHistoryResponse;
import au.com.woolworths.village.sdk.openapi.dto.VerifyPaymentInstrumentsRequest;
import au.com.woolworths.village.sdk.openapi.dto.VerifyPaymentInstrumentsSuccessResponse;

public class WalletManagementApi {
    private ApiClient localVarApiClient;

    public WalletManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for androidpayTokenizePaymentInstrumentIdPost
     * @param paymentInstrumentId The id of the android pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidpayTokenizePaymentInstrumentIdPostCall(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/androidpay/tokenize/{paymentInstrumentId}"
            .replaceAll("\\{" + "paymentInstrumentId" + "\\}", localVarApiClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidpayTokenizePaymentInstrumentIdPostValidateBeforeCall(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInstrumentId' is set
        if (paymentInstrumentId == null) {
            throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling androidpayTokenizePaymentInstrumentIdPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling androidpayTokenizePaymentInstrumentIdPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling androidpayTokenizePaymentInstrumentIdPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling androidpayTokenizePaymentInstrumentIdPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling androidpayTokenizePaymentInstrumentIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = androidpayTokenizePaymentInstrumentIdPostCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Update Android Pay Token
     * Update an Android Pay payment instrument.
     * @param paymentInstrumentId The id of the android pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizeAndroidPayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeAndroidPayResponse androidpayTokenizePaymentInstrumentIdPost(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizeAndroidPayResponse> localVarResp = androidpayTokenizePaymentInstrumentIdPostWithHttpInfo(paymentInstrumentId, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Update Android Pay Token
     * Update an Android Pay payment instrument.
     * @param paymentInstrumentId The id of the android pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizeAndroidPayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeAndroidPayResponse> androidpayTokenizePaymentInstrumentIdPostWithHttpInfo(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = androidpayTokenizePaymentInstrumentIdPostValidateBeforeCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizeAndroidPayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Android Pay Token (asynchronously)
     * Update an Android Pay payment instrument.
     * @param paymentInstrumentId The id of the android pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidpayTokenizePaymentInstrumentIdPostAsync(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizeAndroidPayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidpayTokenizePaymentInstrumentIdPostValidateBeforeCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizeAndroidPayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for androidpayTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidpayTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/androidpay/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call androidpayTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling androidpayTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling androidpayTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling androidpayTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling androidpayTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = androidpayTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Tokenize Android Pay
     * Create a payment instrument id for a provided Android Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizeAndroidPayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeAndroidPayResponse androidpayTokenizePost(String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizeAndroidPayResponse> localVarResp = androidpayTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Tokenize Android Pay
     * Create a payment instrument id for a provided Android Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizeAndroidPayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeAndroidPayResponse> androidpayTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = androidpayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizeAndroidPayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tokenize Android Pay (asynchronously)
     * Create a payment instrument id for a provided Android Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call androidpayTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, TokenizeAndroidPayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizeAndroidPayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = androidpayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizeAndroidPayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applepayTokenizePaymentInstrumentIdPost
     * @param paymentInstrumentId The id of the apple pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applepayTokenizePaymentInstrumentIdPostCall(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applepay/tokenize/{paymentInstrumentId}"
            .replaceAll("\\{" + "paymentInstrumentId" + "\\}", localVarApiClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applepayTokenizePaymentInstrumentIdPostValidateBeforeCall(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInstrumentId' is set
        if (paymentInstrumentId == null) {
            throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling applepayTokenizePaymentInstrumentIdPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling applepayTokenizePaymentInstrumentIdPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling applepayTokenizePaymentInstrumentIdPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling applepayTokenizePaymentInstrumentIdPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applepayTokenizePaymentInstrumentIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = applepayTokenizePaymentInstrumentIdPostCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Update Apple Pay Token
     * Update an Apple Pay payment instrument.
     * @param paymentInstrumentId The id of the apple pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizeApplePayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeApplePayResponse applepayTokenizePaymentInstrumentIdPost(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizeApplePayResponse> localVarResp = applepayTokenizePaymentInstrumentIdPostWithHttpInfo(paymentInstrumentId, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Update Apple Pay Token
     * Update an Apple Pay payment instrument.
     * @param paymentInstrumentId The id of the apple pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizeApplePayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeApplePayResponse> applepayTokenizePaymentInstrumentIdPostWithHttpInfo(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = applepayTokenizePaymentInstrumentIdPostValidateBeforeCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizeApplePayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Apple Pay Token (asynchronously)
     * Update an Apple Pay payment instrument.
     * @param paymentInstrumentId The id of the apple pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applepayTokenizePaymentInstrumentIdPostAsync(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizeApplePayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applepayTokenizePaymentInstrumentIdPostValidateBeforeCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizeApplePayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applepayTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applepayTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applepay/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applepayTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling applepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling applepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling applepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applepayTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = applepayTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Tokenize Apple Pay
     * Create a payment instrument id for a provided Apple Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizeApplePayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeApplePayResponse applepayTokenizePost(String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizeApplePayResponse> localVarResp = applepayTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Tokenize Apple Pay
     * Create a payment instrument id for a provided Apple Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizeApplePayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeApplePayResponse> applepayTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = applepayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizeApplePayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tokenize Apple Pay (asynchronously)
     * Create a payment instrument id for a provided Apple Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applepayTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, TokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizeApplePayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applepayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizeApplePayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cardsInitcapturePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cardsInitcapturePostCall(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/cards/initcapture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cardsInitcapturePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling cardsInitcapturePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling cardsInitcapturePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling cardsInitcapturePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cardsInitcapturePost(Async)");
        }
        

        okhttp3.Call localVarCall = cardsInitcapturePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Initiate Card Capture
     * Get a credit card detials input iframe (URL) for the consumer. This API is rate limited to 10 requests per minute per shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return InitiateCardCaptureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public InitiateCardCaptureResponse cardsInitcapturePost(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<InitiateCardCaptureResponse> localVarResp = cardsInitcapturePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Initiate Card Capture
     * Get a credit card detials input iframe (URL) for the consumer. This API is rate limited to 10 requests per minute per shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;InitiateCardCaptureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InitiateCardCaptureResponse> cardsInitcapturePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = cardsInitcapturePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<InitiateCardCaptureResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate Card Capture (asynchronously)
     * Get a credit card detials input iframe (URL) for the consumer. This API is rate limited to 10 requests per minute per shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cardsInitcapturePostAsync(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<InitiateCardCaptureResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cardsInitcapturePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<InitiateCardCaptureResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for giftcardsBalancePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftcardsBalancePostCall(String xApiKey, String authorization, String xJWSSignature, GiftcardsBalanceRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/giftcards/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call giftcardsBalancePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, GiftcardsBalanceRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling giftcardsBalancePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling giftcardsBalancePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling giftcardsBalancePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling giftcardsBalancePost(Async)");
        }
        

        okhttp3.Call localVarCall = giftcardsBalancePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * Gift Cards Balance
     * Get the balance and expiryinfo for the provided gift cards. This API is rate limited to 5 requests per minute per shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return GiftcardsBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public GiftcardsBalanceResponse giftcardsBalancePost(String xApiKey, String authorization, String xJWSSignature, GiftcardsBalanceRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        ApiResponse<GiftcardsBalanceResponse> localVarResp = giftcardsBalancePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * Gift Cards Balance
     * Get the balance and expiryinfo for the provided gift cards. This API is rate limited to 5 requests per minute per shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ApiResponse&lt;GiftcardsBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GiftcardsBalanceResponse> giftcardsBalancePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, GiftcardsBalanceRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = giftcardsBalancePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<GiftcardsBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gift Cards Balance (asynchronously)
     * Get the balance and expiryinfo for the provided gift cards. This API is rate limited to 5 requests per minute per shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftcardsBalancePostAsync(String xApiKey, String authorization, String xJWSSignature, GiftcardsBalanceRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback<GiftcardsBalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = giftcardsBalancePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<GiftcardsBalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for giftcardsTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftcardsTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, TokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/giftcards/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call giftcardsTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, TokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling giftcardsTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling giftcardsTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling giftcardsTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling giftcardsTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = giftcardsTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * Tokenize Giftcard
     * Create a paymment intrument id for a provided gift card.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return TokenizeGiftcardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeGiftcardResponse giftcardsTokenizePost(String xApiKey, String authorization, String xJWSSignature, TokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        ApiResponse<TokenizeGiftcardResponse> localVarResp = giftcardsTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * Tokenize Giftcard
     * Create a paymment intrument id for a provided gift card.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ApiResponse&lt;TokenizeGiftcardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeGiftcardResponse> giftcardsTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, TokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = giftcardsTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<TokenizeGiftcardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tokenize Giftcard (asynchronously)
     * Create a paymment intrument id for a provided gift card.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call giftcardsTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, TokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback<TokenizeGiftcardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = giftcardsTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<TokenizeGiftcardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googlepayTokenizePaymentTokenPost
     * @param paymentToken The payment token of the google pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googlepayTokenizePaymentTokenPostCall(String paymentToken, String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/googlepay/tokenize/{paymentToken}"
            .replaceAll("\\{" + "paymentToken" + "\\}", localVarApiClient.escapeString(paymentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googlepayTokenizePaymentTokenPostValidateBeforeCall(String paymentToken, String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentToken' is set
        if (paymentToken == null) {
            throw new ApiException("Missing the required parameter 'paymentToken' when calling googlepayTokenizePaymentTokenPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling googlepayTokenizePaymentTokenPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling googlepayTokenizePaymentTokenPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling googlepayTokenizePaymentTokenPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling googlepayTokenizePaymentTokenPost(Async)");
        }
        

        okhttp3.Call localVarCall = googlepayTokenizePaymentTokenPostCall(paymentToken, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Update Google Pay Token
     * Update a Google Pay payment instrument.
     * @param paymentToken The payment token of the google pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizeGooglePayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeGooglePayResponse googlepayTokenizePaymentTokenPost(String paymentToken, String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizeGooglePayResponse> localVarResp = googlepayTokenizePaymentTokenPostWithHttpInfo(paymentToken, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Update Google Pay Token
     * Update a Google Pay payment instrument.
     * @param paymentToken The payment token of the google pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizeGooglePayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeGooglePayResponse> googlepayTokenizePaymentTokenPostWithHttpInfo(String paymentToken, String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = googlepayTokenizePaymentTokenPostValidateBeforeCall(paymentToken, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizeGooglePayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Google Pay Token (asynchronously)
     * Update a Google Pay payment instrument.
     * @param paymentToken The payment token of the google pay payment instrument to update. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googlepayTokenizePaymentTokenPostAsync(String paymentToken, String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizeGooglePayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = googlepayTokenizePaymentTokenPostValidateBeforeCall(paymentToken, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizeGooglePayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googlepayTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googlepayTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/googlepay/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googlepayTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling googlepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling googlepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling googlepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling googlepayTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = googlepayTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Tokenize Google Pay
     * Create a payment token for a provided Google Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizeGooglePayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeGooglePayResponse googlepayTokenizePost(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizeGooglePayResponse> localVarResp = googlepayTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Tokenize Google Pay
     * Create a payment token for a provided Google Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizeGooglePayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeGooglePayResponse> googlepayTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = googlepayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizeGooglePayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tokenize Google Pay (asynchronously)
     * Create a payment token for a provided Google Pay wallet item.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googlepayTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizeGooglePayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = googlepayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizeGooglePayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guestApplepayTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestApplepayTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/guest/applepay/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestApplepayTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling guestApplepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling guestApplepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling guestApplepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling guestApplepayTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = guestApplepayTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Guest Tokenize Apple Pay
     * Create a payment instrument id for a provided Apple Pay wallet item of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizeApplePayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeApplePayResponse guestApplepayTokenizePost(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizeApplePayResponse> localVarResp = guestApplepayTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Guest Tokenize Apple Pay
     * Create a payment instrument id for a provided Apple Pay wallet item of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizeApplePayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeApplePayResponse> guestApplepayTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = guestApplepayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizeApplePayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Guest Tokenize Apple Pay (asynchronously)
     * Create a payment instrument id for a provided Apple Pay wallet item of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestApplepayTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeApplePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizeApplePayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestApplepayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizeApplePayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guestCardsInitcapturePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestCardsInitcapturePostCall(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/guest/cards/initcapture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestCardsInitcapturePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling guestCardsInitcapturePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling guestCardsInitcapturePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling guestCardsInitcapturePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling guestCardsInitcapturePost(Async)");
        }
        

        okhttp3.Call localVarCall = guestCardsInitcapturePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Guest Initiate Card Capture
     * Get a credit card detials input iframe (URL) for a guest user. This API is rate limited to 10 requests per minute per guest shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return InitiateCardCaptureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public InitiateCardCaptureResponse guestCardsInitcapturePost(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<InitiateCardCaptureResponse> localVarResp = guestCardsInitcapturePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Guest Initiate Card Capture
     * Get a credit card detials input iframe (URL) for a guest user. This API is rate limited to 10 requests per minute per guest shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;InitiateCardCaptureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InitiateCardCaptureResponse> guestCardsInitcapturePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = guestCardsInitcapturePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<InitiateCardCaptureResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Guest Initiate Card Capture (asynchronously)
     * Get a credit card detials input iframe (URL) for a guest user. This API is rate limited to 10 requests per minute per guest shopper id.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestCardsInitcapturePostAsync(String xApiKey, String authorization, String xJWSSignature, InitiateCardCaptureRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<InitiateCardCaptureResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestCardsInitcapturePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<InitiateCardCaptureResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guestGiftcardsTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestGiftcardsTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/guest/giftcards/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestGiftcardsTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling guestGiftcardsTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling guestGiftcardsTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling guestGiftcardsTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling guestGiftcardsTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = guestGiftcardsTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Guest Tokenize Giftcard
     * Create a paymment intrument id for a provided gift card of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return GuestTokenizeGiftcardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public GuestTokenizeGiftcardResponse guestGiftcardsTokenizePost(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<GuestTokenizeGiftcardResponse> localVarResp = guestGiftcardsTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Guest Tokenize Giftcard
     * Create a paymment intrument id for a provided gift card of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;GuestTokenizeGiftcardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GuestTokenizeGiftcardResponse> guestGiftcardsTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = guestGiftcardsTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<GuestTokenizeGiftcardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Guest Tokenize Giftcard (asynchronously)
     * Create a paymment intrument id for a provided gift card of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestGiftcardsTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, GuestTokenizeGiftcardRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<GuestTokenizeGiftcardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestGiftcardsTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<GuestTokenizeGiftcardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guestGooglepayTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestGooglepayTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/guest/googlepay/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestGooglepayTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling guestGooglepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling guestGooglepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling guestGooglepayTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling guestGooglepayTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = guestGooglepayTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Guest Tokenize Google Pay
     * Create a payment token for a provided Google Pay wallet item of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizeGooglePayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizeGooglePayResponse guestGooglepayTokenizePost(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizeGooglePayResponse> localVarResp = guestGooglepayTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Guest Tokenize Google Pay
     * Create a payment token for a provided Google Pay wallet item of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizeGooglePayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizeGooglePayResponse> guestGooglepayTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = guestGooglepayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizeGooglePayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Guest Tokenize Google Pay (asynchronously)
     * Create a payment token for a provided Google Pay wallet item of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestGooglepayTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, TokenizeGooglePayRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizeGooglePayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestGooglepayTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizeGooglePayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guestPaypalTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestPaypalTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, GuestTokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/guest/paypal/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guestPaypalTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, GuestTokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling guestPaypalTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling guestPaypalTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling guestPaypalTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling guestPaypalTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = guestPaypalTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Guest Tokenize Paypal
     * Create a paymment intrument id for a provided paypal account of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return GuestTokenizePaypalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public GuestTokenizePaypalResponse guestPaypalTokenizePost(String xApiKey, String authorization, String xJWSSignature, GuestTokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<GuestTokenizePaypalResponse> localVarResp = guestPaypalTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Guest Tokenize Paypal
     * Create a paymment intrument id for a provided paypal account of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;GuestTokenizePaypalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GuestTokenizePaypalResponse> guestPaypalTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, GuestTokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = guestPaypalTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<GuestTokenizePaypalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Guest Tokenize Paypal (asynchronously)
     * Create a paymment intrument id for a provided paypal account of a guest user.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call guestPaypalTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, GuestTokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<GuestTokenizePaypalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = guestPaypalTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<GuestTokenizePaypalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instrumentsGet
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsGetCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instrumentsGetValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling instrumentsGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling instrumentsGet(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling instrumentsGet(Async)");
        }
        

        okhttp3.Call localVarCall = instrumentsGetCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * List Payment Instruments
     * Get the stored payment intruments of a consumer.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ListPaymentInstrumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ListPaymentInstrumentsResponse instrumentsGet(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        ApiResponse<ListPaymentInstrumentsResponse> localVarResp = instrumentsGetWithHttpInfo(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * List Payment Instruments
     * Get the stored payment intruments of a consumer.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ApiResponse&lt;ListPaymentInstrumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPaymentInstrumentsResponse> instrumentsGetWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = instrumentsGetValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<ListPaymentInstrumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Payment Instruments (asynchronously)
     * Get the stored payment intruments of a consumer.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsGetAsync(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback<ListPaymentInstrumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instrumentsGetValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<ListPaymentInstrumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instrumentsImportPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsImportPostCall(String xApiKey, String xJWSSignature, ImportPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/instruments/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instrumentsImportPostValidateBeforeCall(String xApiKey, String xJWSSignature, ImportPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling instrumentsImportPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling instrumentsImportPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling instrumentsImportPost(Async)");
        }
        

        okhttp3.Call localVarCall = instrumentsImportPostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Import Payment Instruments
     * Import a consumers credit cards (from WebPay) and paypal accounts to a new wallet. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ImportPaymentInstrumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ImportPaymentInstrumentsResponse instrumentsImportPost(String xApiKey, String xJWSSignature, ImportPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<ImportPaymentInstrumentsResponse> localVarResp = instrumentsImportPostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Import Payment Instruments
     * Import a consumers credit cards (from WebPay) and paypal accounts to a new wallet. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;ImportPaymentInstrumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportPaymentInstrumentsResponse> instrumentsImportPostWithHttpInfo(String xApiKey, String xJWSSignature, ImportPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = instrumentsImportPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<ImportPaymentInstrumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import Payment Instruments (asynchronously)
     * Import a consumers credit cards (from WebPay) and paypal accounts to a new wallet. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsImportPostAsync(String xApiKey, String xJWSSignature, ImportPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<ImportPaymentInstrumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instrumentsImportPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<ImportPaymentInstrumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instrumentsPaymentInstrumentIdDelete
     * @param paymentInstrumentId The id of the payment instrument to delete. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsPaymentInstrumentIdDeleteCall(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instruments/{paymentInstrumentId}"
            .replaceAll("\\{" + "paymentInstrumentId" + "\\}", localVarApiClient.escapeString(paymentInstrumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instrumentsPaymentInstrumentIdDeleteValidateBeforeCall(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentInstrumentId' is set
        if (paymentInstrumentId == null) {
            throw new ApiException("Missing the required parameter 'paymentInstrumentId' when calling instrumentsPaymentInstrumentIdDelete(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling instrumentsPaymentInstrumentIdDelete(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling instrumentsPaymentInstrumentIdDelete(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling instrumentsPaymentInstrumentIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = instrumentsPaymentInstrumentIdDeleteCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * Delete Payment Instrument
     * Delete a stored payment intrument of a consumer.
     * @param paymentInstrumentId The id of the payment instrument to delete. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public Object instrumentsPaymentInstrumentIdDelete(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        ApiResponse<Object> localVarResp = instrumentsPaymentInstrumentIdDeleteWithHttpInfo(paymentInstrumentId, xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * Delete Payment Instrument
     * Delete a stored payment intrument of a consumer.
     * @param paymentInstrumentId The id of the payment instrument to delete. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> instrumentsPaymentInstrumentIdDeleteWithHttpInfo(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = instrumentsPaymentInstrumentIdDeleteValidateBeforeCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Payment Instrument (asynchronously)
     * Delete a stored payment intrument of a consumer.
     * @param paymentInstrumentId The id of the payment instrument to delete. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsPaymentInstrumentIdDeleteAsync(String paymentInstrumentId, String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = instrumentsPaymentInstrumentIdDeleteValidateBeforeCall(paymentInstrumentId, xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instrumentsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsPostCall(String xApiKey, ListPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instrumentsPostValidateBeforeCall(String xApiKey, ListPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling instrumentsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling instrumentsPost(Async)");
        }
        

        okhttp3.Call localVarCall = instrumentsPostCall(xApiKey, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * List Payment Instruments
     * Get the stored payment intruments of a consumer. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ListPaymentInstrumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ListPaymentInstrumentsResponse instrumentsPost(String xApiKey, ListPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<ListPaymentInstrumentsResponse> localVarResp = instrumentsPostWithHttpInfo(xApiKey, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * List Payment Instruments
     * Get the stored payment intruments of a consumer. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;ListPaymentInstrumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPaymentInstrumentsResponse> instrumentsPostWithHttpInfo(String xApiKey, ListPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = instrumentsPostValidateBeforeCall(xApiKey, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<ListPaymentInstrumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Payment Instruments (asynchronously)
     * Get the stored payment intruments of a consumer. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsPostAsync(String xApiKey, ListPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<ListPaymentInstrumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instrumentsPostValidateBeforeCall(xApiKey, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<ListPaymentInstrumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instrumentsVerifyPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsVerifyPostCall(String xApiKey, String authorization, String xJWSSignature, VerifyPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/instruments/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instrumentsVerifyPostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, VerifyPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling instrumentsVerifyPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling instrumentsVerifyPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling instrumentsVerifyPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling instrumentsVerifyPost(Async)");
        }
        

        okhttp3.Call localVarCall = instrumentsVerifyPostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * Verify Payment Instruments
     * Verify if a provided payment instrument is valid and optionally perform a fraud check on the instrument.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return VerifyPaymentInstrumentsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyPaymentInstrumentsSuccessResponse instrumentsVerifyPost(String xApiKey, String authorization, String xJWSSignature, VerifyPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        ApiResponse<VerifyPaymentInstrumentsSuccessResponse> localVarResp = instrumentsVerifyPostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * Verify Payment Instruments
     * Verify if a provided payment instrument is valid and optionally perform a fraud check on the instrument.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ApiResponse&lt;VerifyPaymentInstrumentsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyPaymentInstrumentsSuccessResponse> instrumentsVerifyPostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, VerifyPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = instrumentsVerifyPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<VerifyPaymentInstrumentsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify Payment Instruments (asynchronously)
     * Verify if a provided payment instrument is valid and optionally perform a fraud check on the instrument.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instrumentsVerifyPostAsync(String xApiKey, String authorization, String xJWSSignature, VerifyPaymentInstrumentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback<VerifyPaymentInstrumentsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instrumentsVerifyPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<VerifyPaymentInstrumentsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantsProfileGet
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantsProfileGetCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantsProfileGetValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling merchantsProfileGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling merchantsProfileGet(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling merchantsProfileGet(Async)");
        }
        

        okhttp3.Call localVarCall = merchantsProfileGetCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Merchant Profile
     * Get the current configuration set of the merchant. If this API is called without a valid access token it is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return MerchantProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public MerchantProfileResponse merchantsProfileGet(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<MerchantProfileResponse> localVarResp = merchantsProfileGetWithHttpInfo(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Merchant Profile
     * Get the current configuration set of the merchant. If this API is called without a valid access token it is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;MerchantProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantProfileResponse> merchantsProfileGetWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = merchantsProfileGetValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<MerchantProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merchant Profile (asynchronously)
     * Get the current configuration set of the merchant. If this API is called without a valid access token it is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantsProfileGetAsync(String xApiKey, String authorization, String xJWSSignature, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<MerchantProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantsProfileGetValidateBeforeCall(xApiKey, authorization, xJWSSignature, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<MerchantProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paypalTokenizePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paypalTokenizePostCall(String xApiKey, String authorization, String xJWSSignature, TokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/paypal/tokenize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paypalTokenizePostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, TokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling paypalTokenizePost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paypalTokenizePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling paypalTokenizePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling paypalTokenizePost(Async)");
        }
        

        okhttp3.Call localVarCall = paypalTokenizePostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Tokenize Paypal
     * Create a paymment intrument id for a provided paypal account.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return TokenizePaypalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TokenizePaypalResponse paypalTokenizePost(String xApiKey, String authorization, String xJWSSignature, TokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<TokenizePaypalResponse> localVarResp = paypalTokenizePostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Tokenize Paypal
     * Create a paymment intrument id for a provided paypal account.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;TokenizePaypalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TokenizePaypalResponse> paypalTokenizePostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, TokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = paypalTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<TokenizePaypalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tokenize Paypal (asynchronously)
     * Create a paymment intrument id for a provided paypal account.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paypalTokenizePostAsync(String xApiKey, String authorization, String xJWSSignature, TokenizePaypalRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<TokenizePaypalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paypalTokenizePostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<TokenizePaypalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsPostCall(String xApiKey, String authorization, String xJWSSignature, TransactionHistoryRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsPostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, TransactionHistoryRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling transactionsPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling transactionsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling transactionsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling transactionsPost(Async)");
        }
        

        okhttp3.Call localVarCall = transactionsPostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * Transaction History
     * Get the transaction history of a consumer.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return TransactionHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionHistoryResponse transactionsPost(String xApiKey, String authorization, String xJWSSignature, TransactionHistoryRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        ApiResponse<TransactionHistoryResponse> localVarResp = transactionsPostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * Transaction History
     * Get the transaction history of a consumer.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ApiResponse&lt;TransactionHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionHistoryResponse> transactionsPostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, TransactionHistoryRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = transactionsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<TransactionHistoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transaction History (asynchronously)
     * Get the transaction history of a consumer.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsPostAsync(String xApiKey, String authorization, String xJWSSignature, TransactionHistoryRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback<TransactionHistoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<TransactionHistoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletDeletePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletDeletePostCall(String xApiKey, String xJWSSignature, DeleteWalletRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/wallet/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        if (xEverydayPayWallet != null) {
            localVarHeaderParams.put("X-Everyday-Pay-Wallet", localVarApiClient.parameterToString(xEverydayPayWallet));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletDeletePostValidateBeforeCall(String xApiKey, String xJWSSignature, DeleteWalletRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling walletDeletePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling walletDeletePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling walletDeletePost(Async)");
        }
        

        okhttp3.Call localVarCall = walletDeletePostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        return localVarCall;

    }

    /**
     * Delete Wallet
     * Delete a consumers wallet. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public Object walletDeletePost(String xApiKey, String xJWSSignature, DeleteWalletRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        ApiResponse<Object> localVarResp = walletDeletePostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet);
        return localVarResp.getData();
    }

    /**
     * Delete Wallet
     * Delete a consumers wallet. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> walletDeletePostWithHttpInfo(String xApiKey, String xJWSSignature, DeleteWalletRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet) throws ApiException {
        okhttp3.Call localVarCall = walletDeletePostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Wallet (asynchronously)
     * Delete a consumers wallet. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call walletDeletePostAsync(String xApiKey, String xJWSSignature, DeleteWalletRequest body, String xAuthKey, String xAuthDigest, String xMessageId, String xEverydayPayWallet, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletDeletePostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, xEverydayPayWallet, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
