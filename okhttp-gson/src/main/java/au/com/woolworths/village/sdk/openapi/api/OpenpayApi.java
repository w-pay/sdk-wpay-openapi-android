/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.api;

import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import au.com.woolworths.village.sdk.openapi.client.ApiCallback;
import au.com.woolworths.village.sdk.openapi.client.ApiClient;
import au.com.woolworths.village.sdk.openapi.client.ApiException;
import au.com.woolworths.village.sdk.openapi.client.ApiResponse;
import au.com.woolworths.village.sdk.openapi.client.Configuration;
import au.com.woolworths.village.sdk.openapi.client.Pair;
import au.com.woolworths.village.sdk.openapi.dto.OpenpayCompletionsRequest;
import au.com.woolworths.village.sdk.openapi.dto.OpenpayCompletionsSuccessResponse;
import au.com.woolworths.village.sdk.openapi.dto.OpenpayPaymentsRequest;
import au.com.woolworths.village.sdk.openapi.dto.OpenpayPaymentsSuccessResponse;
import au.com.woolworths.village.sdk.openapi.dto.OpenpayRefundsRequest;
import au.com.woolworths.village.sdk.openapi.dto.OpenpayRefundsSuccessResponse;
import au.com.woolworths.village.sdk.openapi.dto.OpenpayVoidsRequest;
import au.com.woolworths.village.sdk.openapi.dto.OpenpayVoidsSuccessResponse;

public class OpenpayApi {
    private ApiClient localVarApiClient;

    public OpenpayApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OpenpayApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for openpayCompletionsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpayCompletionsPostCall(String xApiKey, String xJWSSignature, OpenpayCompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/openpay/completions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openpayCompletionsPostValidateBeforeCall(String xApiKey, String xJWSSignature, OpenpayCompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling openpayCompletionsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling openpayCompletionsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling openpayCompletionsPost(Async)");
        }
        

        okhttp3.Call localVarCall = openpayCompletionsPostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Openpay Completions
     * Complete pre-authed Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return OpenpayCompletionsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public OpenpayCompletionsSuccessResponse openpayCompletionsPost(String xApiKey, String xJWSSignature, OpenpayCompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<OpenpayCompletionsSuccessResponse> localVarResp = openpayCompletionsPostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Openpay Completions
     * Complete pre-authed Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;OpenpayCompletionsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenpayCompletionsSuccessResponse> openpayCompletionsPostWithHttpInfo(String xApiKey, String xJWSSignature, OpenpayCompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = openpayCompletionsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<OpenpayCompletionsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Openpay Completions (asynchronously)
     * Complete pre-authed Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpayCompletionsPostAsync(String xApiKey, String xJWSSignature, OpenpayCompletionsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<OpenpayCompletionsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openpayCompletionsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<OpenpayCompletionsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openpayPaymentsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpayPaymentsPostCall(String xApiKey, String authorization, String xJWSSignature, OpenpayPaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/openpay/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openpayPaymentsPostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, OpenpayPaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling openpayPaymentsPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling openpayPaymentsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling openpayPaymentsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling openpayPaymentsPost(Async)");
        }
        

        okhttp3.Call localVarCall = openpayPaymentsPostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Openpay Payments
     * Make payments to a merchant using Openpay payment tokens.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return OpenpayPaymentsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public OpenpayPaymentsSuccessResponse openpayPaymentsPost(String xApiKey, String authorization, String xJWSSignature, OpenpayPaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<OpenpayPaymentsSuccessResponse> localVarResp = openpayPaymentsPostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Openpay Payments
     * Make payments to a merchant using Openpay payment tokens.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;OpenpayPaymentsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenpayPaymentsSuccessResponse> openpayPaymentsPostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, OpenpayPaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = openpayPaymentsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<OpenpayPaymentsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Openpay Payments (asynchronously)
     * Make payments to a merchant using Openpay payment tokens.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpayPaymentsPostAsync(String xApiKey, String authorization, String xJWSSignature, OpenpayPaymentsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<OpenpayPaymentsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openpayPaymentsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<OpenpayPaymentsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openpayRefundsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpayRefundsPostCall(String xApiKey, String xJWSSignature, OpenpayRefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/openpay/refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openpayRefundsPostValidateBeforeCall(String xApiKey, String xJWSSignature, OpenpayRefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling openpayRefundsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling openpayRefundsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling openpayRefundsPost(Async)");
        }
        

        okhttp3.Call localVarCall = openpayRefundsPostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Openpay Refunds
     * Refund Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return OpenpayRefundsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public OpenpayRefundsSuccessResponse openpayRefundsPost(String xApiKey, String xJWSSignature, OpenpayRefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<OpenpayRefundsSuccessResponse> localVarResp = openpayRefundsPostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Openpay Refunds
     * Refund Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;OpenpayRefundsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenpayRefundsSuccessResponse> openpayRefundsPostWithHttpInfo(String xApiKey, String xJWSSignature, OpenpayRefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = openpayRefundsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<OpenpayRefundsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Openpay Refunds (asynchronously)
     * Refund Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpayRefundsPostAsync(String xApiKey, String xJWSSignature, OpenpayRefundsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<OpenpayRefundsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openpayRefundsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<OpenpayRefundsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openpayVoidsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpayVoidsPostCall(String xApiKey, String xJWSSignature, OpenpayVoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/openpay/voids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openpayVoidsPostValidateBeforeCall(String xApiKey, String xJWSSignature, OpenpayVoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling openpayVoidsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling openpayVoidsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling openpayVoidsPost(Async)");
        }
        

        okhttp3.Call localVarCall = openpayVoidsPostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Openpay Voids
     * Void (cancel) pre-authed Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return OpenpayVoidsSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public OpenpayVoidsSuccessResponse openpayVoidsPost(String xApiKey, String xJWSSignature, OpenpayVoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<OpenpayVoidsSuccessResponse> localVarResp = openpayVoidsPostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Openpay Voids
     * Void (cancel) pre-authed Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;OpenpayVoidsSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenpayVoidsSuccessResponse> openpayVoidsPostWithHttpInfo(String xApiKey, String xJWSSignature, OpenpayVoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = openpayVoidsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<OpenpayVoidsSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Openpay Voids (asynchronously)
     * Void (cancel) pre-authed Openpay payments. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openpayVoidsPostAsync(String xApiKey, String xJWSSignature, OpenpayVoidsRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<OpenpayVoidsSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openpayVoidsPostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<OpenpayVoidsSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
