/*
 * Wpay APIs
 * Wpay APIs for payments and gifting
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package au.com.woolworths.village.sdk.openapi.api;

import au.com.woolworths.village.sdk.openapi.client.ApiCallback;
import au.com.woolworths.village.sdk.openapi.client.ApiClient;
import au.com.woolworths.village.sdk.openapi.client.ApiException;
import au.com.woolworths.village.sdk.openapi.client.ApiResponse;
import au.com.woolworths.village.sdk.openapi.client.Configuration;
import au.com.woolworths.village.sdk.openapi.client.Pair;
import au.com.woolworths.village.sdk.openapi.client.ProgressRequestBody;
import au.com.woolworths.village.sdk.openapi.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import au.com.woolworths.village.sdk.openapi.dto.BaseErrorResponse;
import au.com.woolworths.village.sdk.openapi.dto.ChargePaymentAgreementRequest;
import au.com.woolworths.village.sdk.openapi.dto.CreatePaymentAgreementRequest;
import au.com.woolworths.village.sdk.openapi.dto.PaymentAgreementErrorResponse;
import au.com.woolworths.village.sdk.openapi.dto.PaymentAgreementResponse;
import au.com.woolworths.village.sdk.openapi.dto.UpdatePaymentAgreementRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentAgreementsApi {
    private ApiClient localVarApiClient;

    public PaymentAgreementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentAgreementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for paymentagreementsChargePost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentagreementsChargePostCall(String xApiKey, String xJWSSignature, ChargePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/paymentagreements/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentagreementsChargePostValidateBeforeCall(String xApiKey, String xJWSSignature, ChargePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling paymentagreementsChargePost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling paymentagreementsChargePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling paymentagreementsChargePost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentagreementsChargePostCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Charge Payment Agreement
     * Perform charge transaction against a payment agreement. This service will use the provided information to perform the charge transaction. A charge payment is made by the merchant to charge a customer as per their payment agreement. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return PaymentAgreementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAgreementResponse paymentagreementsChargePost(String xApiKey, String xJWSSignature, ChargePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<PaymentAgreementResponse> localVarResp = paymentagreementsChargePostWithHttpInfo(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Charge Payment Agreement
     * Perform charge transaction against a payment agreement. This service will use the provided information to perform the charge transaction. A charge payment is made by the merchant to charge a customer as per their payment agreement. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;PaymentAgreementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAgreementResponse> paymentagreementsChargePostWithHttpInfo(String xApiKey, String xJWSSignature, ChargePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = paymentagreementsChargePostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<PaymentAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Charge Payment Agreement (asynchronously)
     * Perform charge transaction against a payment agreement. This service will use the provided information to perform the charge transaction. A charge payment is made by the merchant to charge a customer as per their payment agreement. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentagreementsChargePostAsync(String xApiKey, String xJWSSignature, ChargePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<PaymentAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentagreementsChargePostValidateBeforeCall(xApiKey, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<PaymentAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentagreementsPaymentTokenDelete
     * @param paymentToken The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentagreementsPaymentTokenDeleteCall(String paymentToken, String xApiKey, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/paymentagreements/{paymentToken}"
            .replaceAll("\\{" + "paymentToken" + "\\}", localVarApiClient.escapeString(paymentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentagreementsPaymentTokenDeleteValidateBeforeCall(String paymentToken, String xApiKey, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentToken' is set
        if (paymentToken == null) {
            throw new ApiException("Missing the required parameter 'paymentToken' when calling paymentagreementsPaymentTokenDelete(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling paymentagreementsPaymentTokenDelete(Async)");
        }
        

        okhttp3.Call localVarCall = paymentagreementsPaymentTokenDeleteCall(paymentToken, xApiKey, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Delete Payment Agreement
     * Delete an existing payment agreement. This API is IP restricted to allow unauthenticated server side calls.
     * @param paymentToken The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public Object paymentagreementsPaymentTokenDelete(String paymentToken, String xApiKey, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<Object> localVarResp = paymentagreementsPaymentTokenDeleteWithHttpInfo(paymentToken, xApiKey, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Delete Payment Agreement
     * Delete an existing payment agreement. This API is IP restricted to allow unauthenticated server side calls.
     * @param paymentToken The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> paymentagreementsPaymentTokenDeleteWithHttpInfo(String paymentToken, String xApiKey, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = paymentagreementsPaymentTokenDeleteValidateBeforeCall(paymentToken, xApiKey, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Payment Agreement (asynchronously)
     * Delete an existing payment agreement. This API is IP restricted to allow unauthenticated server side calls.
     * @param paymentToken The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentagreementsPaymentTokenDeleteAsync(String paymentToken, String xApiKey, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentagreementsPaymentTokenDeleteValidateBeforeCall(paymentToken, xApiKey, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentagreementsPaymentTokenPost
     * @param paymentToken The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentagreementsPaymentTokenPostCall(String paymentToken, String xApiKey, String authorization, String xJWSSignature, UpdatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/paymentagreements/{paymentToken}"
            .replaceAll("\\{" + "paymentToken" + "\\}", localVarApiClient.escapeString(paymentToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentagreementsPaymentTokenPostValidateBeforeCall(String paymentToken, String xApiKey, String authorization, String xJWSSignature, UpdatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'paymentToken' is set
        if (paymentToken == null) {
            throw new ApiException("Missing the required parameter 'paymentToken' when calling paymentagreementsPaymentTokenPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling paymentagreementsPaymentTokenPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentagreementsPaymentTokenPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling paymentagreementsPaymentTokenPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling paymentagreementsPaymentTokenPost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentagreementsPaymentTokenPostCall(paymentToken, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Update Payment Agreement
     * Update an existing payment agreement and validate the payment instrument if changed. This API is IP restricted to allow unauthenticated server side calls.
     * @param paymentToken The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return PaymentAgreementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAgreementResponse paymentagreementsPaymentTokenPost(String paymentToken, String xApiKey, String authorization, String xJWSSignature, UpdatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<PaymentAgreementResponse> localVarResp = paymentagreementsPaymentTokenPostWithHttpInfo(paymentToken, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Update Payment Agreement
     * Update an existing payment agreement and validate the payment instrument if changed. This API is IP restricted to allow unauthenticated server side calls.
     * @param paymentToken The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;PaymentAgreementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAgreementResponse> paymentagreementsPaymentTokenPostWithHttpInfo(String paymentToken, String xApiKey, String authorization, String xJWSSignature, UpdatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = paymentagreementsPaymentTokenPostValidateBeforeCall(paymentToken, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<PaymentAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Payment Agreement (asynchronously)
     * Update an existing payment agreement and validate the payment instrument if changed. This API is IP restricted to allow unauthenticated server side calls.
     * @param paymentToken The payment token of the payment agreement. The payment token is a unique identifier for the payment agreement. (required)
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentagreementsPaymentTokenPostAsync(String paymentToken, String xApiKey, String authorization, String xJWSSignature, UpdatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<PaymentAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentagreementsPaymentTokenPostValidateBeforeCall(paymentToken, xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<PaymentAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentagreementsPost
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentagreementsPostCall(String xApiKey, String authorization, String xJWSSignature, CreatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/paymentagreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        if (xAuthKey != null) {
            localVarHeaderParams.put("X-Auth-Key", localVarApiClient.parameterToString(xAuthKey));
        }

        if (xAuthDigest != null) {
            localVarHeaderParams.put("X-Auth-Digest", localVarApiClient.parameterToString(xAuthDigest));
        }

        if (xMessageId != null) {
            localVarHeaderParams.put("X-Message-Id", localVarApiClient.parameterToString(xMessageId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (xJWSSignature != null) {
            localVarHeaderParams.put("X-JWS-Signature", localVarApiClient.parameterToString(xJWSSignature));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentagreementsPostValidateBeforeCall(String xApiKey, String authorization, String xJWSSignature, CreatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling paymentagreementsPost(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling paymentagreementsPost(Async)");
        }
        
        // verify the required parameter 'xJWSSignature' is set
        if (xJWSSignature == null) {
            throw new ApiException("Missing the required parameter 'xJWSSignature' when calling paymentagreementsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling paymentagreementsPost(Async)");
        }
        

        okhttp3.Call localVarCall = paymentagreementsPostCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        return localVarCall;

    }

    /**
     * Create Payment Agreement
     * Create a new payment agreement which will be added to the users wallet after validating the payment instrument. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return PaymentAgreementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentAgreementResponse paymentagreementsPost(String xApiKey, String authorization, String xJWSSignature, CreatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        ApiResponse<PaymentAgreementResponse> localVarResp = paymentagreementsPostWithHttpInfo(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId);
        return localVarResp.getData();
    }

    /**
     * Create Payment Agreement
     * Create a new payment agreement which will be added to the users wallet after validating the payment instrument. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @return ApiResponse&lt;PaymentAgreementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentAgreementResponse> paymentagreementsPostWithHttpInfo(String xApiKey, String authorization, String xJWSSignature, CreatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId) throws ApiException {
        okhttp3.Call localVarCall = paymentagreementsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, null);
        Type localVarReturnType = new TypeToken<PaymentAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment Agreement (asynchronously)
     * Create a new payment agreement which will be added to the users wallet after validating the payment instrument. This API is IP restricted to allow unauthenticated server side calls.
     * @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team. (required)
     * @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present. (required)
     * @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present. (required)
     * @param body  (required)
     * @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
     * @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
     * @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing or invalid request payload or value. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid API Route. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unknown error occurred. </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> A Business Validation error occurred. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> An Internal System error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The Service is currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> The request timed out. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentagreementsPostAsync(String xApiKey, String authorization, String xJWSSignature, CreatePaymentAgreementRequest body, String xAuthKey, String xAuthDigest, String xMessageId, final ApiCallback<PaymentAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentagreementsPostValidateBeforeCall(xApiKey, authorization, xJWSSignature, body, xAuthKey, xAuthDigest, xMessageId, _callback);
        Type localVarReturnType = new TypeToken<PaymentAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
